{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spring Boot Objectifs du cours D\u00e9couverte et utilisation de microservices Utiliser JPA pour communiquer avec des bases de donn\u00e9es Valider et s\u00e9curiser les donn\u00e9es Gestion d'erreurs Notions et d\u00e9finitions Microservice Les microservices sont une technique de d\u00e9veloppement logiciel \u2014 une variante de l'architecture orient\u00e9e services (SOA) \u2014 qui structure une application comme un ensemble de services faiblement coupl\u00e9s. Les microservices ind\u00e9pendants communiquent les uns avec les autres en utilisant des API ind\u00e9pendantes du langage de programmation. Des API REST sont souvent employ\u00e9es pour relier chaque microservice aux autres. Un avantage avanc\u00e9 est que lors d'un besoin critique de mise \u00e0 jour d'une ressource, seul le microservice contenant cette ressource sera mis \u00e0 jour, l'ensemble de l'application restant compatible avec la modification, contrairement \u00e0 la totalit\u00e9 de l'application dans une architecture classique. REST Rappels rapide REST: REST (pour REpresentational State Transfer) ne d\u00e9crit pas une impl\u00e9mentation mais un style d\u2019architecture qui suit diff\u00e9rents principes : client-serveur : les responsabilit\u00e9s sont s\u00e9par\u00e9es entre le client et le serveur. L\u2019interface utilisateur est s\u00e9par\u00e9e de celle du stockage des donn\u00e9es. Cela permet aux deux d\u2019\u00e9voluer ind\u00e9pendamment (contrairement \u00e0 des applications qui r\u00e9alisent des requ\u00eates directement en base de donn\u00e9es par exemple\u2026). sans \u00e9tat : la requ\u00eate envoy\u00e9e par le client doit \u00eatre auto-suffisante : ne pas n\u00e9cessiter de sauvegarder un \u00e9tat sur le serveur mise en cache : la possibilit\u00e9 pour le serveur de sp\u00e9cifier les r\u00e9ponses pouvant \u00eatre mises en cache une interface uniforme : chaque ressource est identifi\u00e9e unitairement, les ressources ont des repr\u00e9sentations d\u00e9finies un syst\u00e8me hi\u00e9rarchis\u00e9 par couche : les \u00e9tats de l\u2019application sont repr\u00e9sent\u00e9s par des ressources individuelles. L\u2019ensemble de l\u2019information n\u2019est pas envoy\u00e9e dans une ressource unique. \u00c0 noter qu\u2019on assimile \u00ab API REST \u00bb avec l\u2019application de ce style d\u2019architecture sur le protocole HTTP et en utilisant le format d\u2019\u00e9change de donn\u00e9es JSON. Avec le protocole HTTP d\u00e9finit les m\u00e9thodes suivantes: GET , POST , PUT , PATCH et DELETE . Exemple: Ressource collection, telle que http://api.exemple.com/collection/ GET : R\u00e9cup\u00e8re les URI des ressources membres de la ressource collection dans le corps de la r\u00e9ponse. POST : Cr\u00e9e une ressource membre dans la ressource collection en utilisant les instructions du corps de la requ\u00eate. L'URI de la ressource membre cr\u00e9\u00e9e est attribu\u00e9 automatiquement et retourn\u00e9 dans le champ d'en-t\u00eate Location de la r\u00e9ponse. PUT : Remplace toutes les repr\u00e9sentations des ressources membres de la ressource collection par la repr\u00e9sentation dans le corps de la requ\u00eate, ou cr\u00e9e la ressource collection si elle n'existe pas. PATCH :Met \u00e0 jour toutes les repr\u00e9sentations des ressources membres de la ressource collection en utilisant les instructions du corps de la requ\u00eate, ou cr\u00e9e \u00e9ventuellement la ressource collection si elle n'existe pas. DETELE : Supprime toutes les repr\u00e9sentations des ressources membres de la ressource collection. Exemple Swagger Plus d'infos: HTTP , REST MVC Pourquoi Spring Boot? D\u00e9finition : Spring est un Framework de d\u00e9veloppement d'applications Java, qui apporte plusieurs fonctionnalit\u00e9s comme Spring Security, SpringMVC, Spring Batch, Spring Data, etc. Ces Frameworks ont pour objectif de faciliter la t\u00e2che aux d\u00e9veloppeurs. Malheureusement, leurs mises en \u0153uvre deviennent tr\u00e8s complexes \u00e0 travers les fichiers de configuration XML qui ne cessent de grossir, et une gestion des d\u00e9pendances fastidieuse. C'est pour r\u00e9pondre \u00e0 cette inqui\u00e9tude que le projet Spring Boot a vu le jour. D\u00e9finition : Spring Boot est un sous projet de Spring qui vise \u00e0 rendre Spring plus facile d'utilisation en \u00e9limant plusieurs \u00e9tapes de configuration. L'objectif de Spring Boot est de permettre aux d\u00e9veloppeurs de se concentrer sur des t\u00e2ches techniques et non des t\u00e2ches de configurations, de d\u00e9ploiements, etc. Ce qui a pour cons\u00e9quences un gain de temps et de productivit\u00e9. Spring Boot apporte \u00e0 Spring une tr\u00e8s grande simplicit\u00e9 d'utilisation : Il facilite notamment la cr\u00e9ation, la configuration et le d\u00e9ploiement d'une application compl\u00e8te. On n'a plus besoin des fichiers XML \u00e0 configurer (pas besoin du fichier du descripteur de d\u00e9ploiement web.xml dans le cas d'une application web). Spring Boot permet de d\u00e9ployer tr\u00e8s facilement une application dans plusieurs environnements sans avoir \u00e0 \u00e9crire des scripts. Pour ce faire, une simple indication de l'environnement (d\u00e9veloppement ou production) dans le fichier de propri\u00e9t\u00e9s (.properties) suffit \u00e0 d\u00e9ployer l'application dans l'un ou l'autre environnement. Ceci est rendu possible gr\u00e2ce \u00e0 la notion de profil \u00e0 d\u00e9clarer toujours dans le fichier de propri\u00e9t\u00e9s. Spring Boot poss\u00e8de un serveur d'application Tomcat embarqu\u00e9 afin de faciliter le d\u00e9ploiement d'une application web. Il est possible d'utiliser un serveur autre ou externe, gr\u00e2ce \u00e0 une simple d\u00e9claration dans le fichier pom.xml. Spring Boot permet de mettre en place un suivi m\u00e9trique de l'application une fois d\u00e9ploy\u00e9e sur le serveur afin de suivre en temps r\u00e9el l'activit\u00e9 du serveur, ceci gr\u00e2ce \u00e0 spring-boot-starter-actuator. Outil configuration spring boot Le site start.spring.io permet de g\u00e9n\u00e9rer l'ensemble des d\u00e9pendances du projet et cr\u00e9\u00e9 le squelette de l'application. Hello REST World Pr\u00e9requis Java 1.8 Maven Spring Tool Suite Git Linux? Fichier de build <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.3.3.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>demo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>demo</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> Classe de lancement: com.example.demo.DemoApplication package com.example.demo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } // Bean permettant de lister la liste des bens Spring instanci\u00e9s @Bean public CommandLineRunner commandLineRunner(ApplicationContext ctx) { return args -> { System.out.println(\"Let's inspect the beans provided by Spring Boot:\"); String[] beanNames = ctx.getBeanDefinitionNames(); Arrays.sort(beanNames); for (String beanName : beanNames) { System.out.println(beanName); } }; } } La classe DemoApplication contient la m\u00e9thode void main(String[] args) n\u00e9cessaire dans une application Spring Boot, et permet l'ex\u00e9cution de celle-ci : c'est le point d'entr\u00e9e de l'application. La classe de d\u00e9marrage de l'application DemoApplication doit \u00eatre \u00e0 la racine du package principal si on veut permettre \u00e0 Spring de scanner les sous-packages en utilisant l'annotation @SpringBootApplication . L'annotation @SpringBootApplication est centrale dans une application Spring Boot et permet de scanner le package courant et ses sous-packages . Elle est \u00e9quivalente \u00e0 l'ensemble des annotations @Configuration @EnableAutoConfiguration @ComponentScan @Configuration permet de configurer une classe comme une source de d\u00e9finition des beans Spring. @EnableAutoConfiguration ajoute l'ensemble des beans du classpath. @ComponentScan autorise Spring \u00e0 rechercher tous les composants, les configurations et autres services de l'application et \u00e0 initialiser tous les contr\u00f4leurs. Le contr\u00f4leur com.example.springboot.HelloController package com.example.springboot; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.RequestMapping; @RestController public class HelloController { @RequestMapping(\"/\") public String index() { return \"Greetings from Spring Boot!\"; } } Cette classe est annot\u00e9e @RestController, ce qui veut dire qu'elle est pr\u00eate \u00e0 \u00eatre utilis\u00e9e par Spring MVC pour g\u00e9rer des requ\u00eates web. @RequestMapping associe / \u00e0 la m\u00e9thode index().Quand la m\u00e9thode est invoqu\u00e9e depuis un navigateur web ou la commande curl elle retourne le texte du return. L'annotation @RestController, est une combinaison des annotations @Controller et @ResponseBody, cr\u00e9\u00e9e une r\u00e9ponse web retournant de la data plut\u00f4t qu'une vue. Lancement Plusieurs possibilit\u00e9s: Avec Eclipse Run as Spring boot Application Avec maven mvn spring-boot:run En lan\u00e7ant le main du jar g\u00e9n\u00e9r\u00e9 Tests manuels Il suffit de faire une requ\u00eate http vers localhost:8080 curl localhost:8080 ou avec le navigateur: firefox http://localhost:8080 8080 est le port par d\u00e9faut du serveur web embarqu\u00e9 par spring boot. Tests unitaires Junit package com.example.springboot; import static org.hamcrest.Matchers.equalTo; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.http.MediaType; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; @SpringBootTest @AutoConfigureMockMvc public class HelloControllerTest { @Autowired private MockMvc mvc; @Test public void getHello() throws Exception { mvc.perform(MockMvcRequestBuilders.get(\"/\").accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().string(equalTo(\"Greetings from Spring Boot!\"))); } } Exo thymeleaf Thymeleaf est un Java HTML5 Template Engine qui peut travailler \u00e0 la fois dans des environnements Web (Servlet) et celui de non Web. Il est mieux adapt\u00e9 pour diffuser XHTML/HTML5 sur View (View Layer) des applications Web bas\u00e9es sur MVC. Mais il peut traiter n'importe quel fichier XML m\u00eame dans des environnements hors ligne (offline). Il fournit une int\u00e9gration compl\u00e8te de Spring Framework\u200b\u200b\u200b\u200b\u200b\u200b\u200b. Le fichier mod\u00e8le (Template file) de Thymeleaf est en substance un fichier de document ordinaire au format HTML5. Thymeleaf Engine (le moteur Thymeleaf) va lire un fichier mod\u00e8le et le combiner avec des objets Java pour g\u00e9n\u00e9rer (generate) un autre document. Voici ce que nous allons r\u00e9aliser: Exo thymeleaf Security Tuto D\u00e9pendances start.spring.io devtools web thymeleaf Security Ajouter dans le pom g\u00e9n\u00e9r\u00e9: <dependency> <groupId>org.thymeleaf.extras</groupId> <artifactId>thymeleaf-extras-springsecurity5</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> Un petit conseil: il vaut mieux supprimer tous les .html non n\u00e9cessaire. Classe de configuration de la s\u00e9curit\u00e9: @Configuration public class SecurityConfiguration extends WebSecurityConfigurerAdapter { protected void configure(final HttpSecurity http) throws Exception { http .formLogin() .loginPage(\"/login\") .failureUrl(\"/login-error\") .and() .logout() .logoutSuccessUrl(\"/index\"); } @Bean @Override public UserDetailsService userDetailsService() { UserDetails user = User.withDefaultPasswordEncoder() .username(\"user\") .password(\"user\") .roles(\"USER\") .build(); UserDetails admin = User.withDefaultPasswordEncoder() .username(\"admin\") .password(\"admin\") .roles(\"ADMIN\") .build(); return new InMemoryUserDetailsManager(user,admin); } } Spring Controller Quelle est la diff\u00e9rence entre les annotations @Controller et @RestController dans Spring MVC? Controller Les contr\u00f4leurs classiques peuvent \u00eatre annot\u00e9s avec l\u2019annotation @Controller . Il s\u2019agit simplement d\u2019une sp\u00e9cialisation de la classe @Component qui permet de d\u00e9tecter automatiquement les classes d\u2019impl\u00e9mentation via le balayage du classpath. @Controller est g\u00e9n\u00e9ralement utilis\u00e9 en combinaison avec une annotation @RequestMapping utilis\u00e9e dans les m\u00e9thodes de traitement des demandes. Voyons un exemple rapide du contr\u00f4leur Spring MVC: @Controller @RequestMapping(\"books\") public class SimpleBookController { @GetMapping(\"/{id}\", produces = \"application/json\") public @ResponseBody Book getBook(@PathVariable int id) { return findBookById(id); } private Book findBookById(int id) { //... } } La m\u00e9thode de traitement de la demande est annot\u00e9e avec @ResponseBody . Cette annotation active la s\u00e9rialisation automatique de l\u2019objet de retour dans HttpResponse . RestController @RestController est une version sp\u00e9cialis\u00e9e du contr\u00f4leur. Il inclut les annotations @Controller et @ResponseBody et simplifie donc la mise en \u0153uvre du contr\u00f4leur: @RestController @RequestMapping(\"books-rest\") public class SimpleBookRestController { @GetMapping(\"/{id}\", produces = \"application/json\") public Book getBook(@PathVariable int id) { return findBookById(id); } private Book findBookById(int id) { //... } } Le contr\u00f4leur est annot\u00e9 avec l\u2019annotation @RestController ; par cons\u00e9quent, le @ResponseBody n\u2019est pas requis. Chaque m\u00e9thode de traitement des demandes de la classe de contr\u00f4leur s\u00e9rialise automatiquement les objets renvoy\u00e9s dans HttpResponse . Retourner une vue Pour retourner une vue (Thymleaf par exemple), il suffit d'avoir un controller et de retourner la string correspondant au fichier de la vue. @Controller public class MainController { // Login form @RequestMapping(value = { \"/log-in\", \"/login\" }, method = RequestMethod.GET) public String login() { return \"login\"; //retourne la page login.html } } Autres annotations @Component Cette annotation est utilis\u00e9e sur les classes pour indiquer un composant Spring. L'annotation @Component marque la classe Java en tant que bean ou composant afin que le m\u00e9canisme d'analyse des composants de Spring puisse l'ajouter au contexte de l'application. @Controller L'annotation @Controller est utilis\u00e9e pour indiquer que la classe est un contr\u00f4leur Spring. Cette annotation peut \u00eatre utilis\u00e9e pour identifier les contr\u00f4leurs pour Spring MVC ou Spring WebFlux. @Service Cette annotation est utilis\u00e9e sur une classe. @Service marque une classe Java qui effectue certains traitements service, tels que l'ex\u00e9cution de la logique m\u00e9tier, l'ex\u00e9cution de calculs et l'appel d'API externes. Cette annotation est une forme sp\u00e9cialis\u00e9e de l'annotation @Component destin\u00e9e \u00e0 \u00eatre utilis\u00e9e dans la couche de service. @Repository Cette annotation est utilis\u00e9e sur les classes Java qui acc\u00e8dent directement \u00e0 la base de donn\u00e9es. L'annotation @Repository fonctionne comme un marqueur pour toute classe remplissant le r\u00f4le de r\u00e9f\u00e9rentiel ou d'objet d'acc\u00e8s aux donn\u00e9es. Cette annotation a une fonction de traduction automatique. Par exemple, lorsqu'une exception se produit dans @Repository, il existe un gestionnaire pour cette exception et il n'est pas n\u00e9cessaire d'ajouter un bloc try-catch.","title":"Home"},{"location":"#spring-boot","text":"","title":"Spring Boot"},{"location":"#objectifs-du-cours","text":"D\u00e9couverte et utilisation de microservices Utiliser JPA pour communiquer avec des bases de donn\u00e9es Valider et s\u00e9curiser les donn\u00e9es Gestion d'erreurs","title":"Objectifs du cours"},{"location":"#notions-et-definitions","text":"","title":"Notions et d\u00e9finitions"},{"location":"#microservice","text":"Les microservices sont une technique de d\u00e9veloppement logiciel \u2014 une variante de l'architecture orient\u00e9e services (SOA) \u2014 qui structure une application comme un ensemble de services faiblement coupl\u00e9s. Les microservices ind\u00e9pendants communiquent les uns avec les autres en utilisant des API ind\u00e9pendantes du langage de programmation. Des API REST sont souvent employ\u00e9es pour relier chaque microservice aux autres. Un avantage avanc\u00e9 est que lors d'un besoin critique de mise \u00e0 jour d'une ressource, seul le microservice contenant cette ressource sera mis \u00e0 jour, l'ensemble de l'application restant compatible avec la modification, contrairement \u00e0 la totalit\u00e9 de l'application dans une architecture classique.","title":"Microservice"},{"location":"#rest","text":"Rappels rapide REST: REST (pour REpresentational State Transfer) ne d\u00e9crit pas une impl\u00e9mentation mais un style d\u2019architecture qui suit diff\u00e9rents principes : client-serveur : les responsabilit\u00e9s sont s\u00e9par\u00e9es entre le client et le serveur. L\u2019interface utilisateur est s\u00e9par\u00e9e de celle du stockage des donn\u00e9es. Cela permet aux deux d\u2019\u00e9voluer ind\u00e9pendamment (contrairement \u00e0 des applications qui r\u00e9alisent des requ\u00eates directement en base de donn\u00e9es par exemple\u2026). sans \u00e9tat : la requ\u00eate envoy\u00e9e par le client doit \u00eatre auto-suffisante : ne pas n\u00e9cessiter de sauvegarder un \u00e9tat sur le serveur mise en cache : la possibilit\u00e9 pour le serveur de sp\u00e9cifier les r\u00e9ponses pouvant \u00eatre mises en cache une interface uniforme : chaque ressource est identifi\u00e9e unitairement, les ressources ont des repr\u00e9sentations d\u00e9finies un syst\u00e8me hi\u00e9rarchis\u00e9 par couche : les \u00e9tats de l\u2019application sont repr\u00e9sent\u00e9s par des ressources individuelles. L\u2019ensemble de l\u2019information n\u2019est pas envoy\u00e9e dans une ressource unique. \u00c0 noter qu\u2019on assimile \u00ab API REST \u00bb avec l\u2019application de ce style d\u2019architecture sur le protocole HTTP et en utilisant le format d\u2019\u00e9change de donn\u00e9es JSON. Avec le protocole HTTP d\u00e9finit les m\u00e9thodes suivantes: GET , POST , PUT , PATCH et DELETE . Exemple: Ressource collection, telle que http://api.exemple.com/collection/ GET : R\u00e9cup\u00e8re les URI des ressources membres de la ressource collection dans le corps de la r\u00e9ponse. POST : Cr\u00e9e une ressource membre dans la ressource collection en utilisant les instructions du corps de la requ\u00eate. L'URI de la ressource membre cr\u00e9\u00e9e est attribu\u00e9 automatiquement et retourn\u00e9 dans le champ d'en-t\u00eate Location de la r\u00e9ponse. PUT : Remplace toutes les repr\u00e9sentations des ressources membres de la ressource collection par la repr\u00e9sentation dans le corps de la requ\u00eate, ou cr\u00e9e la ressource collection si elle n'existe pas. PATCH :Met \u00e0 jour toutes les repr\u00e9sentations des ressources membres de la ressource collection en utilisant les instructions du corps de la requ\u00eate, ou cr\u00e9e \u00e9ventuellement la ressource collection si elle n'existe pas. DETELE : Supprime toutes les repr\u00e9sentations des ressources membres de la ressource collection. Exemple Swagger Plus d'infos: HTTP , REST","title":"REST"},{"location":"#mvc","text":"","title":"MVC"},{"location":"#pourquoi-spring-boot","text":"D\u00e9finition : Spring est un Framework de d\u00e9veloppement d'applications Java, qui apporte plusieurs fonctionnalit\u00e9s comme Spring Security, SpringMVC, Spring Batch, Spring Data, etc. Ces Frameworks ont pour objectif de faciliter la t\u00e2che aux d\u00e9veloppeurs. Malheureusement, leurs mises en \u0153uvre deviennent tr\u00e8s complexes \u00e0 travers les fichiers de configuration XML qui ne cessent de grossir, et une gestion des d\u00e9pendances fastidieuse. C'est pour r\u00e9pondre \u00e0 cette inqui\u00e9tude que le projet Spring Boot a vu le jour. D\u00e9finition : Spring Boot est un sous projet de Spring qui vise \u00e0 rendre Spring plus facile d'utilisation en \u00e9limant plusieurs \u00e9tapes de configuration. L'objectif de Spring Boot est de permettre aux d\u00e9veloppeurs de se concentrer sur des t\u00e2ches techniques et non des t\u00e2ches de configurations, de d\u00e9ploiements, etc. Ce qui a pour cons\u00e9quences un gain de temps et de productivit\u00e9. Spring Boot apporte \u00e0 Spring une tr\u00e8s grande simplicit\u00e9 d'utilisation : Il facilite notamment la cr\u00e9ation, la configuration et le d\u00e9ploiement d'une application compl\u00e8te. On n'a plus besoin des fichiers XML \u00e0 configurer (pas besoin du fichier du descripteur de d\u00e9ploiement web.xml dans le cas d'une application web). Spring Boot permet de d\u00e9ployer tr\u00e8s facilement une application dans plusieurs environnements sans avoir \u00e0 \u00e9crire des scripts. Pour ce faire, une simple indication de l'environnement (d\u00e9veloppement ou production) dans le fichier de propri\u00e9t\u00e9s (.properties) suffit \u00e0 d\u00e9ployer l'application dans l'un ou l'autre environnement. Ceci est rendu possible gr\u00e2ce \u00e0 la notion de profil \u00e0 d\u00e9clarer toujours dans le fichier de propri\u00e9t\u00e9s. Spring Boot poss\u00e8de un serveur d'application Tomcat embarqu\u00e9 afin de faciliter le d\u00e9ploiement d'une application web. Il est possible d'utiliser un serveur autre ou externe, gr\u00e2ce \u00e0 une simple d\u00e9claration dans le fichier pom.xml. Spring Boot permet de mettre en place un suivi m\u00e9trique de l'application une fois d\u00e9ploy\u00e9e sur le serveur afin de suivre en temps r\u00e9el l'activit\u00e9 du serveur, ceci gr\u00e2ce \u00e0 spring-boot-starter-actuator.","title":"Pourquoi Spring Boot?"},{"location":"#outil-configuration-spring-boot","text":"Le site start.spring.io permet de g\u00e9n\u00e9rer l'ensemble des d\u00e9pendances du projet et cr\u00e9\u00e9 le squelette de l'application.","title":"Outil configuration spring boot"},{"location":"#hello-rest-world","text":"","title":"Hello REST World"},{"location":"#prerequis","text":"Java 1.8 Maven Spring Tool Suite Git Linux?","title":"Pr\u00e9requis"},{"location":"#fichier-de-build","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.3.3.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>demo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>demo</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"Fichier de build"},{"location":"#classe-de-lancement-comexampledemodemoapplication","text":"package com.example.demo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } // Bean permettant de lister la liste des bens Spring instanci\u00e9s @Bean public CommandLineRunner commandLineRunner(ApplicationContext ctx) { return args -> { System.out.println(\"Let's inspect the beans provided by Spring Boot:\"); String[] beanNames = ctx.getBeanDefinitionNames(); Arrays.sort(beanNames); for (String beanName : beanNames) { System.out.println(beanName); } }; } } La classe DemoApplication contient la m\u00e9thode void main(String[] args) n\u00e9cessaire dans une application Spring Boot, et permet l'ex\u00e9cution de celle-ci : c'est le point d'entr\u00e9e de l'application. La classe de d\u00e9marrage de l'application DemoApplication doit \u00eatre \u00e0 la racine du package principal si on veut permettre \u00e0 Spring de scanner les sous-packages en utilisant l'annotation @SpringBootApplication . L'annotation @SpringBootApplication est centrale dans une application Spring Boot et permet de scanner le package courant et ses sous-packages . Elle est \u00e9quivalente \u00e0 l'ensemble des annotations @Configuration @EnableAutoConfiguration @ComponentScan @Configuration permet de configurer une classe comme une source de d\u00e9finition des beans Spring. @EnableAutoConfiguration ajoute l'ensemble des beans du classpath. @ComponentScan autorise Spring \u00e0 rechercher tous les composants, les configurations et autres services de l'application et \u00e0 initialiser tous les contr\u00f4leurs.","title":"Classe de lancement: com.example.demo.DemoApplication"},{"location":"#le-controleur-comexamplespringboothellocontroller","text":"package com.example.springboot; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.RequestMapping; @RestController public class HelloController { @RequestMapping(\"/\") public String index() { return \"Greetings from Spring Boot!\"; } } Cette classe est annot\u00e9e @RestController, ce qui veut dire qu'elle est pr\u00eate \u00e0 \u00eatre utilis\u00e9e par Spring MVC pour g\u00e9rer des requ\u00eates web. @RequestMapping associe / \u00e0 la m\u00e9thode index().Quand la m\u00e9thode est invoqu\u00e9e depuis un navigateur web ou la commande curl elle retourne le texte du return. L'annotation @RestController, est une combinaison des annotations @Controller et @ResponseBody, cr\u00e9\u00e9e une r\u00e9ponse web retournant de la data plut\u00f4t qu'une vue.","title":"Le contr\u00f4leur com.example.springboot.HelloController"},{"location":"#lancement","text":"Plusieurs possibilit\u00e9s: Avec Eclipse Run as Spring boot Application Avec maven mvn spring-boot:run En lan\u00e7ant le main du jar g\u00e9n\u00e9r\u00e9","title":"Lancement"},{"location":"#tests-manuels","text":"Il suffit de faire une requ\u00eate http vers localhost:8080 curl localhost:8080 ou avec le navigateur: firefox http://localhost:8080 8080 est le port par d\u00e9faut du serveur web embarqu\u00e9 par spring boot.","title":"Tests manuels"},{"location":"#tests-unitaires-junit","text":"package com.example.springboot; import static org.hamcrest.Matchers.equalTo; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.http.MediaType; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; @SpringBootTest @AutoConfigureMockMvc public class HelloControllerTest { @Autowired private MockMvc mvc; @Test public void getHello() throws Exception { mvc.perform(MockMvcRequestBuilders.get(\"/\").accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().string(equalTo(\"Greetings from Spring Boot!\"))); } }","title":"Tests unitaires Junit"},{"location":"#exo-thymeleaf","text":"Thymeleaf est un Java HTML5 Template Engine qui peut travailler \u00e0 la fois dans des environnements Web (Servlet) et celui de non Web. Il est mieux adapt\u00e9 pour diffuser XHTML/HTML5 sur View (View Layer) des applications Web bas\u00e9es sur MVC. Mais il peut traiter n'importe quel fichier XML m\u00eame dans des environnements hors ligne (offline). Il fournit une int\u00e9gration compl\u00e8te de Spring Framework\u200b\u200b\u200b\u200b\u200b\u200b\u200b. Le fichier mod\u00e8le (Template file) de Thymeleaf est en substance un fichier de document ordinaire au format HTML5. Thymeleaf Engine (le moteur Thymeleaf) va lire un fichier mod\u00e8le et le combiner avec des objets Java pour g\u00e9n\u00e9rer (generate) un autre document. Voici ce que nous allons r\u00e9aliser:","title":"Exo thymeleaf"},{"location":"#exo-thymeleaf-security","text":"Tuto D\u00e9pendances start.spring.io devtools web thymeleaf Security Ajouter dans le pom g\u00e9n\u00e9r\u00e9: <dependency> <groupId>org.thymeleaf.extras</groupId> <artifactId>thymeleaf-extras-springsecurity5</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> </dependency> Un petit conseil: il vaut mieux supprimer tous les .html non n\u00e9cessaire. Classe de configuration de la s\u00e9curit\u00e9: @Configuration public class SecurityConfiguration extends WebSecurityConfigurerAdapter { protected void configure(final HttpSecurity http) throws Exception { http .formLogin() .loginPage(\"/login\") .failureUrl(\"/login-error\") .and() .logout() .logoutSuccessUrl(\"/index\"); } @Bean @Override public UserDetailsService userDetailsService() { UserDetails user = User.withDefaultPasswordEncoder() .username(\"user\") .password(\"user\") .roles(\"USER\") .build(); UserDetails admin = User.withDefaultPasswordEncoder() .username(\"admin\") .password(\"admin\") .roles(\"ADMIN\") .build(); return new InMemoryUserDetailsManager(user,admin); } }","title":"Exo thymeleaf Security"},{"location":"#spring-controller","text":"Quelle est la diff\u00e9rence entre les annotations @Controller et @RestController dans Spring MVC?","title":"Spring Controller"},{"location":"#controller","text":"Les contr\u00f4leurs classiques peuvent \u00eatre annot\u00e9s avec l\u2019annotation @Controller . Il s\u2019agit simplement d\u2019une sp\u00e9cialisation de la classe @Component qui permet de d\u00e9tecter automatiquement les classes d\u2019impl\u00e9mentation via le balayage du classpath. @Controller est g\u00e9n\u00e9ralement utilis\u00e9 en combinaison avec une annotation @RequestMapping utilis\u00e9e dans les m\u00e9thodes de traitement des demandes. Voyons un exemple rapide du contr\u00f4leur Spring MVC: @Controller @RequestMapping(\"books\") public class SimpleBookController { @GetMapping(\"/{id}\", produces = \"application/json\") public @ResponseBody Book getBook(@PathVariable int id) { return findBookById(id); } private Book findBookById(int id) { //... } } La m\u00e9thode de traitement de la demande est annot\u00e9e avec @ResponseBody . Cette annotation active la s\u00e9rialisation automatique de l\u2019objet de retour dans HttpResponse .","title":"Controller"},{"location":"#restcontroller","text":"@RestController est une version sp\u00e9cialis\u00e9e du contr\u00f4leur. Il inclut les annotations @Controller et @ResponseBody et simplifie donc la mise en \u0153uvre du contr\u00f4leur: @RestController @RequestMapping(\"books-rest\") public class SimpleBookRestController { @GetMapping(\"/{id}\", produces = \"application/json\") public Book getBook(@PathVariable int id) { return findBookById(id); } private Book findBookById(int id) { //... } } Le contr\u00f4leur est annot\u00e9 avec l\u2019annotation @RestController ; par cons\u00e9quent, le @ResponseBody n\u2019est pas requis. Chaque m\u00e9thode de traitement des demandes de la classe de contr\u00f4leur s\u00e9rialise automatiquement les objets renvoy\u00e9s dans HttpResponse .","title":"RestController"},{"location":"#retourner-une-vue","text":"Pour retourner une vue (Thymleaf par exemple), il suffit d'avoir un controller et de retourner la string correspondant au fichier de la vue. @Controller public class MainController { // Login form @RequestMapping(value = { \"/log-in\", \"/login\" }, method = RequestMethod.GET) public String login() { return \"login\"; //retourne la page login.html } }","title":"Retourner une vue"},{"location":"#autres-annotations","text":"@Component Cette annotation est utilis\u00e9e sur les classes pour indiquer un composant Spring. L'annotation @Component marque la classe Java en tant que bean ou composant afin que le m\u00e9canisme d'analyse des composants de Spring puisse l'ajouter au contexte de l'application. @Controller L'annotation @Controller est utilis\u00e9e pour indiquer que la classe est un contr\u00f4leur Spring. Cette annotation peut \u00eatre utilis\u00e9e pour identifier les contr\u00f4leurs pour Spring MVC ou Spring WebFlux. @Service Cette annotation est utilis\u00e9e sur une classe. @Service marque une classe Java qui effectue certains traitements service, tels que l'ex\u00e9cution de la logique m\u00e9tier, l'ex\u00e9cution de calculs et l'appel d'API externes. Cette annotation est une forme sp\u00e9cialis\u00e9e de l'annotation @Component destin\u00e9e \u00e0 \u00eatre utilis\u00e9e dans la couche de service. @Repository Cette annotation est utilis\u00e9e sur les classes Java qui acc\u00e8dent directement \u00e0 la base de donn\u00e9es. L'annotation @Repository fonctionne comme un marqueur pour toute classe remplissant le r\u00f4le de r\u00e9f\u00e9rentiel ou d'objet d'acc\u00e8s aux donn\u00e9es. Cette annotation a une fonction de traduction automatique. Par exemple, lorsqu'une exception se produit dans @Repository, il existe un gestionnaire pour cette exception et il n'est pas n\u00e9cessaire d'ajouter un bloc try-catch.","title":"Autres annotations"},{"location":"Projet/","text":"Projet Descriptif g\u00e9n\u00e9ral Le but du projet et de r\u00e9aliser un agr\u00e9gateur permettant d'acc\u00e9der \u00e0 plusieurs types de r\u00e9seaux sociaux (Facebook /Instagram / Twitter / TikTok / Youtube / ...), de disposer d'une page afin de pouvoir visualiser l'ensemble des contenus avec un template identique. L'utilisateur pourra ajouter \u00e0 son compte autant de comptes publiques ou priv\u00e9s de diff\u00e9rents r\u00e9seaux sociaux. Les donn\u00e9es des diff\u00e9rents r\u00e9seaux seront stock\u00e9es d'une mani\u00e8re g\u00e9n\u00e9rique dans une base propre \u00e0 l'application. L'application finale devra avoir un CI CD d\u00e9ploy\u00e9 dans un Kubernetes host\u00e9 par AWS D\u00e9roulement du projet Le temps du projet r\u00e9serv\u00e9 est de 6 jours mais il devra tr\u00e8s probablement \u00eatre compl\u00e9t\u00e9 par du travail personnel en dehors des heures pr\u00e9vues. Le projet est pr\u00e9vu en deux parties: La premi\u00e8re est commune \u00e0 tout le monde mais rapporte peu de points. La premi\u00e8re est obligatoire avant de commencer la seconde partie. La seconde partie est r\u00e9alis\u00e9e en groupes de 4 et visera \u00e0 l'am\u00e9lioration de la premi\u00e8re partie sur 4 sujets. Partie 1 Minimum vital pour la partie 1 : Int\u00e9gration continue + d\u00e9ploiement kubernetes + AWS Cr\u00e9ation du compte utilisateur et connexion Facebook et Twitter Utilisation de la BDD Redis Utilisation au minimum de Facebook et Twitter Visualisation basique des informations Envoi basique d\u2019un post sur Twitter et Facebook Partie 2 Les 4 sujets sont les suivants: Architecture et int\u00e9gration des autres sujets + ajouts autres r\u00e9seaux sociaux. S\u00e9curit\u00e9 et optimisation de la base de donn\u00e9es + tests de charge et test attaque application. Interface graphique et optimisation de l'exp\u00e9rience utilisateur : drag and drop tous types de media, bootstrap, affichage mobile + navigateur. Administration : cr\u00e9ation d\u2019une partie permettant de g\u00e9rer les utilisateurs + reset mot de passe + gestion quota utilisateur BDD + analyse statistique nombre requ\u00e8te utilisateur Livrables A la fin de chaque semaine faire un mail par groupe pr\u00e9sentant l'avancement et les points bloquants. A la fin de la premi\u00e8re s\u00e9ance faire une r\u00e9ponse \u00e0 l\u2019\u00e9mission de besoin ( reprendre ce que vous avez compris de la pr\u00e9sentation du projet en d\u00e9taillant techniquement comment vous allez vous y prendre et enfin bien expliquer la partie de votre groupe en proposant la liste des fonctionnalit\u00e9s apport\u00e9s avec au minimum celles pr\u00e9cis\u00e9es plus haut) Pr\u00e9parer une d\u00e9mo pour la fin de la partie 1 Envoi de la partie 2 au d\u00e9but de la derni\u00e8re s\u00e9ance. D\u00e9mo par projet des parties 2 D\u00e9mo globale partie 2 int\u00e9gr\u00e9e","title":"Projet"},{"location":"Projet/#projet","text":"","title":"Projet"},{"location":"Projet/#descriptif-general","text":"Le but du projet et de r\u00e9aliser un agr\u00e9gateur permettant d'acc\u00e9der \u00e0 plusieurs types de r\u00e9seaux sociaux (Facebook /Instagram / Twitter / TikTok / Youtube / ...), de disposer d'une page afin de pouvoir visualiser l'ensemble des contenus avec un template identique. L'utilisateur pourra ajouter \u00e0 son compte autant de comptes publiques ou priv\u00e9s de diff\u00e9rents r\u00e9seaux sociaux. Les donn\u00e9es des diff\u00e9rents r\u00e9seaux seront stock\u00e9es d'une mani\u00e8re g\u00e9n\u00e9rique dans une base propre \u00e0 l'application. L'application finale devra avoir un CI CD d\u00e9ploy\u00e9 dans un Kubernetes host\u00e9 par AWS","title":"Descriptif g\u00e9n\u00e9ral"},{"location":"Projet/#deroulement-du-projet","text":"Le temps du projet r\u00e9serv\u00e9 est de 6 jours mais il devra tr\u00e8s probablement \u00eatre compl\u00e9t\u00e9 par du travail personnel en dehors des heures pr\u00e9vues. Le projet est pr\u00e9vu en deux parties: La premi\u00e8re est commune \u00e0 tout le monde mais rapporte peu de points. La premi\u00e8re est obligatoire avant de commencer la seconde partie. La seconde partie est r\u00e9alis\u00e9e en groupes de 4 et visera \u00e0 l'am\u00e9lioration de la premi\u00e8re partie sur 4 sujets.","title":"D\u00e9roulement du projet"},{"location":"Projet/#partie-1","text":"Minimum vital pour la partie 1 : Int\u00e9gration continue + d\u00e9ploiement kubernetes + AWS Cr\u00e9ation du compte utilisateur et connexion Facebook et Twitter Utilisation de la BDD Redis Utilisation au minimum de Facebook et Twitter Visualisation basique des informations Envoi basique d\u2019un post sur Twitter et Facebook","title":"Partie 1"},{"location":"Projet/#partie-2","text":"Les 4 sujets sont les suivants: Architecture et int\u00e9gration des autres sujets + ajouts autres r\u00e9seaux sociaux. S\u00e9curit\u00e9 et optimisation de la base de donn\u00e9es + tests de charge et test attaque application. Interface graphique et optimisation de l'exp\u00e9rience utilisateur : drag and drop tous types de media, bootstrap, affichage mobile + navigateur. Administration : cr\u00e9ation d\u2019une partie permettant de g\u00e9rer les utilisateurs + reset mot de passe + gestion quota utilisateur BDD + analyse statistique nombre requ\u00e8te utilisateur","title":"Partie 2"},{"location":"Projet/#livrables","text":"A la fin de chaque semaine faire un mail par groupe pr\u00e9sentant l'avancement et les points bloquants. A la fin de la premi\u00e8re s\u00e9ance faire une r\u00e9ponse \u00e0 l\u2019\u00e9mission de besoin ( reprendre ce que vous avez compris de la pr\u00e9sentation du projet en d\u00e9taillant techniquement comment vous allez vous y prendre et enfin bien expliquer la partie de votre groupe en proposant la liste des fonctionnalit\u00e9s apport\u00e9s avec au minimum celles pr\u00e9cis\u00e9es plus haut) Pr\u00e9parer une d\u00e9mo pour la fin de la partie 1 Envoi de la partie 2 au d\u00e9but de la derni\u00e8re s\u00e9ance. D\u00e9mo par projet des parties 2 D\u00e9mo globale partie 2 int\u00e9gr\u00e9e","title":"Livrables"},{"location":"ProjetE-Commerce/","text":"Projet E-Commerce Cahier des charges Projet site E-commerce Cr\u00e9ation d\u2019un site d'e-commerce de qualit\u00e9 pro de vente de plusieurs types d\u2019articles. Il devra \u00eatre multilingue (au moins fran\u00e7ais et anglais) . Il devra avoir une barre de recherche et une possibilit\u00e9 de filtrer et trier les r\u00e9sultats affich\u00e9s. Gestion avec s\u00e9curit\u00e9 des comptes utilisateurs. Avec page sign up. Il devra avoir une partie admin permettant de g\u00e9rer les utilisateurs et les articles . Il devra avoir une partie monitoring avec la stack ELK permettant de visualiser les performances du serveur et du flux utilisateur. Il devra pouvoir g\u00e9rer panier, commande, livraison et paiement en ligne par carte et PayPal. Le site devra \u00eatre r\u00e9alis\u00e9 avec Spring boot en backend et angular et thymeleaf en frontend. Des tests automatiques doivent couvrir la partie backend et frontend.","title":"Projet"},{"location":"ProjetE-Commerce/#projet-e-commerce","text":"","title":"Projet E-Commerce"},{"location":"ProjetE-Commerce/#cahier-des-charges-projet-site-e-commerce","text":"Cr\u00e9ation d\u2019un site d'e-commerce de qualit\u00e9 pro de vente de plusieurs types d\u2019articles. Il devra \u00eatre multilingue (au moins fran\u00e7ais et anglais) . Il devra avoir une barre de recherche et une possibilit\u00e9 de filtrer et trier les r\u00e9sultats affich\u00e9s. Gestion avec s\u00e9curit\u00e9 des comptes utilisateurs. Avec page sign up. Il devra avoir une partie admin permettant de g\u00e9rer les utilisateurs et les articles . Il devra avoir une partie monitoring avec la stack ELK permettant de visualiser les performances du serveur et du flux utilisateur. Il devra pouvoir g\u00e9rer panier, commande, livraison et paiement en ligne par carte et PayPal. Le site devra \u00eatre r\u00e9alis\u00e9 avec Spring boot en backend et angular et thymeleaf en frontend. Des tests automatiques doivent couvrir la partie backend et frontend.","title":"Cahier des charges Projet site E-commerce"},{"location":"Rattrapage/","text":"Rattrapage Partie 1 Exemple Personne Cette partie (non not\u00e9e) sert d'exemple afin de pouvoir r\u00e9aliser la partie 2 (not\u00e9e). Il est tr\u00e8s vivement conseill\u00e9 de la r\u00e9aliser. Elle permet une meilleure r\u00e9alisation de la suite. Les instructions de 1 \u00e0 4 suivantes ont d\u00e9j\u00e0 \u00e9t\u00e9 r\u00e9alis\u00e9es afin de vous aider. Commencer par le 5) 1) Cr\u00e9er un controller ConsoleController d\u00e9di\u00e9 \u00e0 la console associant l'adresse /console \u00e0 la redirection vers h2-console 2) Cr\u00e9er un controller MainController permettant de gerer les appels sur nos repository retournant les objets en JSON Voici les param\u00e8tres \u00e0 utiliser pour les deux prochaines m\u00e9thode: @RequestParam(name = \"method\", required = true, defaultValue = \"id\") String method, @RequestParam(name = \"value\", required = true) String value chaque m\u00e9thode devra avoir un switch prenant en entr\u00e9e method 3) Associer l'adresse /person avec les m\u00e9thodes retournant qu'une valeur (dans le switch) 4) Associer l'adresse /persons avec les m\u00e9thodes retournant une liste (dans le switch) 5) Acceder \u00e0 la console et cr\u00e9er une querry permettant d'afficher toutes les personnes commen\u00e7ant par S 6) Cr\u00e9er une nouvelle m\u00e9thode dans le PersonRepository findNameStartingByS et y mapper la query obtenue pr\u00e9c\u00e9demment sachant que dans le code ce n'est pas les tables et champs de la BDD qu'il faut utiliser mais ceux de l' Entity 7) Refaire la m\u00eame query en language naturel (uniquement en java) Doc spring 8) Cr\u00e9er deux autres query de type different de la premi\u00e8re Partie 2 Vraie BDD Cr\u00e9er les Entity Agent, Orders, Customer suivant le sch\u00e9ma ci dessous et la d\u00e9claration des tables. Pour le moment considerer les cl\u00e9s \u00e9trang\u00e8res comme des champs simples. Elles seront utilis\u00e9es dans la partie 3. CREATE TABLE \"AGENTS\" ( \"AGENT_CODE\" CHAR(6) NOT NULL PRIMARY KEY, \"AGENT_NAME\" CHAR(40), \"WORKING_AREA\" CHAR(35), \"COMMISSION\" NUMBER(10,2), \"PHONE_NO\" CHAR(15), \"COUNTRY\" VARCHAR2(25) ); CREATE TABLE \"CUSTOMER\" ( \"CUST_CODE\" VARCHAR2(6) NOT NULL PRIMARY KEY, \"CUST_NAME\" VARCHAR2(40) NOT NULL, \"CUST_CITY\" CHAR(35), \"WORKING_AREA\" VARCHAR2(35) NOT NULL, \"CUST_COUNTRY\" VARCHAR2(20) NOT NULL, \"GRADE\" NUMBER, \"OPENING_AMT\" NUMBER(12,2) NOT NULL, \"RECEIVE_AMT\" NUMBER(12,2) NOT NULL, \"PAYMENT_AMT\" NUMBER(12,2) NOT NULL, \"OUTSTANDING_AMT\" NUMBER(12,2) NOT NULL, \"PHONE_NO\" VARCHAR2(17) NOT NULL, \"AGENT_CODE\" CHAR(6) NOT NULL REFERENCES AGENTS ); CREATE TABLE \"ORDERS\" ( \"ORD_NUM\" NUMBER(6,0) NOT NULL PRIMARY KEY, \"ORD_AMOUNT\" NUMBER(12,2) NOT NULL, \"ADVANCE_AMOUNT\" NUMBER(12,2) NOT NULL, \"ORD_DATE\" DATE NOT NULL, \"CUST_CODE\" VARCHAR2(6) NOT NULL REFERENCES CUSTOMER, \"AGENT_CODE\" CHAR(6) NOT NULL REFERENCES AGENTS, \"ORD_DESCRIPTION\" VARCHAR2(60) NOT NULL ); Charger les donn\u00e9es de d\u00e9pot Github dataTP2 soit manuellement soit automatiquement. Cr\u00e9er les repository associ\u00e9s et ajouter des m\u00e9thodes pour: 1) Trouver des agents par nom, trouver des agents \u00e0 la commission plus petite que la valeur en param\u00e8tre, trouver des agents par COUNTRY 2) Trouver des customers par nom, Trouver des customers par ville et Trouver des customers par openingAtm plus petit que le param\u00e8tre 3) Trouver des orders par agent code et Trouver des orders par orderAmount plus petit que le param\u00e8tre Cr\u00e9er des requ\u00e8tes de jointure pour chaque order r\u00e9cup\u00e9rer les valeurs associ\u00e9es d'agent et customer Dans le controller y ajouter les m\u00e9thodes de la m\u00eame fa\u00e7on que pour les personnes et y binder toutes les m\u00e9thodes. Partie 3 Optimisations Commenter l'annotation @column pour les cl\u00e9s externes et rajouter @ManyToOne @JoinColumn( name=\"nom de la colonne\", unique=false, nullable=false, updatable=true) et remplacer le type du champ par l'objet voulu. Afficher la liste des orders. Que constatez vous? Ecrire la r\u00e9ponse en commentaire apr\u00e8s la ligne public class ExoBddDaoApplication { Fin Supprimer le dossier target, zipper le projet de me l'envoyer pr mail. V\u00e9rifier l'envoi du mail (pas de mail de retour \u00e0 cause de la pi\u00e8ce jointe)","title":"Rattrapage"},{"location":"Rattrapage/#rattrapage","text":"","title":"Rattrapage"},{"location":"Rattrapage/#partie-1-exemple-personne","text":"Cette partie (non not\u00e9e) sert d'exemple afin de pouvoir r\u00e9aliser la partie 2 (not\u00e9e). Il est tr\u00e8s vivement conseill\u00e9 de la r\u00e9aliser. Elle permet une meilleure r\u00e9alisation de la suite. Les instructions de 1 \u00e0 4 suivantes ont d\u00e9j\u00e0 \u00e9t\u00e9 r\u00e9alis\u00e9es afin de vous aider. Commencer par le 5) 1) Cr\u00e9er un controller ConsoleController d\u00e9di\u00e9 \u00e0 la console associant l'adresse /console \u00e0 la redirection vers h2-console 2) Cr\u00e9er un controller MainController permettant de gerer les appels sur nos repository retournant les objets en JSON Voici les param\u00e8tres \u00e0 utiliser pour les deux prochaines m\u00e9thode: @RequestParam(name = \"method\", required = true, defaultValue = \"id\") String method, @RequestParam(name = \"value\", required = true) String value chaque m\u00e9thode devra avoir un switch prenant en entr\u00e9e method 3) Associer l'adresse /person avec les m\u00e9thodes retournant qu'une valeur (dans le switch) 4) Associer l'adresse /persons avec les m\u00e9thodes retournant une liste (dans le switch) 5) Acceder \u00e0 la console et cr\u00e9er une querry permettant d'afficher toutes les personnes commen\u00e7ant par S 6) Cr\u00e9er une nouvelle m\u00e9thode dans le PersonRepository findNameStartingByS et y mapper la query obtenue pr\u00e9c\u00e9demment sachant que dans le code ce n'est pas les tables et champs de la BDD qu'il faut utiliser mais ceux de l' Entity 7) Refaire la m\u00eame query en language naturel (uniquement en java) Doc spring 8) Cr\u00e9er deux autres query de type different de la premi\u00e8re","title":"Partie 1 Exemple Personne"},{"location":"Rattrapage/#partie-2-vraie-bdd","text":"Cr\u00e9er les Entity Agent, Orders, Customer suivant le sch\u00e9ma ci dessous et la d\u00e9claration des tables. Pour le moment considerer les cl\u00e9s \u00e9trang\u00e8res comme des champs simples. Elles seront utilis\u00e9es dans la partie 3. CREATE TABLE \"AGENTS\" ( \"AGENT_CODE\" CHAR(6) NOT NULL PRIMARY KEY, \"AGENT_NAME\" CHAR(40), \"WORKING_AREA\" CHAR(35), \"COMMISSION\" NUMBER(10,2), \"PHONE_NO\" CHAR(15), \"COUNTRY\" VARCHAR2(25) ); CREATE TABLE \"CUSTOMER\" ( \"CUST_CODE\" VARCHAR2(6) NOT NULL PRIMARY KEY, \"CUST_NAME\" VARCHAR2(40) NOT NULL, \"CUST_CITY\" CHAR(35), \"WORKING_AREA\" VARCHAR2(35) NOT NULL, \"CUST_COUNTRY\" VARCHAR2(20) NOT NULL, \"GRADE\" NUMBER, \"OPENING_AMT\" NUMBER(12,2) NOT NULL, \"RECEIVE_AMT\" NUMBER(12,2) NOT NULL, \"PAYMENT_AMT\" NUMBER(12,2) NOT NULL, \"OUTSTANDING_AMT\" NUMBER(12,2) NOT NULL, \"PHONE_NO\" VARCHAR2(17) NOT NULL, \"AGENT_CODE\" CHAR(6) NOT NULL REFERENCES AGENTS ); CREATE TABLE \"ORDERS\" ( \"ORD_NUM\" NUMBER(6,0) NOT NULL PRIMARY KEY, \"ORD_AMOUNT\" NUMBER(12,2) NOT NULL, \"ADVANCE_AMOUNT\" NUMBER(12,2) NOT NULL, \"ORD_DATE\" DATE NOT NULL, \"CUST_CODE\" VARCHAR2(6) NOT NULL REFERENCES CUSTOMER, \"AGENT_CODE\" CHAR(6) NOT NULL REFERENCES AGENTS, \"ORD_DESCRIPTION\" VARCHAR2(60) NOT NULL ); Charger les donn\u00e9es de d\u00e9pot Github dataTP2 soit manuellement soit automatiquement. Cr\u00e9er les repository associ\u00e9s et ajouter des m\u00e9thodes pour: 1) Trouver des agents par nom, trouver des agents \u00e0 la commission plus petite que la valeur en param\u00e8tre, trouver des agents par COUNTRY 2) Trouver des customers par nom, Trouver des customers par ville et Trouver des customers par openingAtm plus petit que le param\u00e8tre 3) Trouver des orders par agent code et Trouver des orders par orderAmount plus petit que le param\u00e8tre Cr\u00e9er des requ\u00e8tes de jointure pour chaque order r\u00e9cup\u00e9rer les valeurs associ\u00e9es d'agent et customer Dans le controller y ajouter les m\u00e9thodes de la m\u00eame fa\u00e7on que pour les personnes et y binder toutes les m\u00e9thodes.","title":"Partie 2 Vraie BDD"},{"location":"Rattrapage/#partie-3-optimisations","text":"Commenter l'annotation @column pour les cl\u00e9s externes et rajouter @ManyToOne @JoinColumn( name=\"nom de la colonne\", unique=false, nullable=false, updatable=true) et remplacer le type du champ par l'objet voulu. Afficher la liste des orders. Que constatez vous? Ecrire la r\u00e9ponse en commentaire apr\u00e8s la ligne public class ExoBddDaoApplication {","title":"Partie 3 Optimisations"},{"location":"Rattrapage/#fin","text":"Supprimer le dossier target, zipper le projet de me l'envoyer pr mail. V\u00e9rifier l'envoi du mail (pas de mail de retour \u00e0 cause de la pi\u00e8ce jointe)","title":"Fin"},{"location":"TP1/","text":"TP1 url: https://start.spring.io/starter.zip?name=webapp&groupId=com.boot&artifactId=webapp&version=0.0.1-SNAPSHOT&description=Demo+project+for+Spring+Boot&packageName=com.example.demo&type=maven-project&packaging=jar&javaVersion=1.8&language=java&bootVersion=2.3.3.RELEASE&dependencies=devtools&dependencies=h2&dependencies=data-jpa&dependencies=security&dependencies=thymeleaf&dependencies=web Partie 1 BDD L'utilisation de JPA (Java Persistence API) permet de s'abstraire du langage de requ\u00eate de la base de donn\u00e9es. H2 est une base de donn\u00e9es embarqu\u00e9e, en m\u00e9moire, \u00e9crite en Java qui permet de garder le build portable. La configuration de H2 est tr\u00e8s simple. Il suffit de l'ajouter dans le POM pour que Spring Boot cr\u00e9er automatiquement la database, cr\u00e9er les objets JDBC et configure Hibernate. Hibernate va \u00e0 son tour scanner toutes les annotations JPA et va cr\u00e9er automatiquement les tables dans la BDD. Connexion console : JDBC URL=url=jdbc:h2:mem:testdb Partie 2 MVC CRUD L'acronyme CRUD (pour create, read, update, delete) d\u00e9signe les quatre op\u00e9rations de base pour la persistance des donn\u00e9es, en particulier le stockage d'informations en base de donn\u00e9es. Operation SQL HTTP Create INSERT POST Read SELECT GET Update UPDATE PUT Delete DELETE DELETE L'annotation @Autowired plac\u00e9e sur un setter permet de demander \u00e0 Spring de d'injecter une d\u00e9pendance. L'annotation @Service plac\u00e9e sur une classe permet de declarer \u00e0 Spring que la classe est un service. Cr\u00e9er une classe annot\u00e9e composant public class ProductLoader implements ApplicationListener<ContextRefreshedEvent>{} Y injecter le ProductRepository. Dans le onApplication event injecter plusieurs instances de produit dans le productRepository. Cr\u00e9er l'interface ProductService permettant au controller d'interragir avec le mod\u00e8le: public interface ProductService { Iterable<Product> listAllProducts(); Product getProductById(Integer id); Product saveProduct(Product product); void deleteProduct(Integer id); } Implementer le @Service ProductServiceImpl en mappant toutes les m\u00e9thodes sur le ProductRepository (\u00e0 injecter) Completer le controller suivant. Il doit utiliser le ProductService. @Controller public class ProductController { private ProductService productService; //GET sur /products public String list(Model model){ model.addAttribute(\"products\", .... return \"products\"; } //GET sur \"product/show/{id}\" public String showProduct(@PathVariable Integer id, Model model){ model.addAttribute(\"product\", ... return \"productshow\"; } //GET sur \"product/edit/{id}\" public String edit(@PathVariable Integer id, Model model){ model.addAttribute(\"product\",... return \"productform\"; } //GET sur\"product/new\" public String newProduct(Model model){ model.addAttribute(\"product\", new Product()); return \"productform\"; } //POST sur \"product\" public String saveProduct(Product product){ ... return \"redirect:/product/show/\" + product.getId(); } //GET sur \"product/delete/{id}\" public String delete(@PathVariable Integer id){ ... return \"redirect:/products\"; } } Cr\u00e9ation / mise \u00e0 jour d'un product La m\u00eame page HTML peut \u00eatre utilis\u00e9e pour cr\u00e9er et mettre \u00e0 jour les produits. L'astuce consiste \u00e0 faire en sorte que le controller retourne un objet vide pour une cr\u00e9ation et l'objet existant pour une mise \u00e0 jour. De cette fa\u00e7on il n'y aura pas de probl\u00e8mes d'objets null. Et toutes les propri\u00e9t\u00e9s non nulle peuvent se transformer en formulaire. La ligne suivante cr\u00e9e le formulaire dans Thymeleaf. <form class=\"form-horizontal\" th:object=\"${product}\" th:action=\"@{/product}\" method=\"post\"> Le tag th:object relie l'objet product au formulaire. Le tag th:action d\u00e9finit quelle url doit \u00eatre appel\u00e9e lors de la soumission du formulaire (/product) url. La m\u00e9thode post est aussi renseign\u00e9e. C'est donc le controller suivant qui va \u00eatre appel\u00e9: @RequestMapping(value = \"product\", method = RequestMethod.POST) public String saveProduct(Product product){ productService.saveProduct(product); return \"redirect:/product/\" + product.getId(); } Il retourne vers l'objet modifi\u00e9. L'\u00e9tape suivante est cruciale pour que les mise \u00e0 jour fonctionnent. Toutes les entit\u00e9s pr\u00e9sentes en BDD ont un ID. L'utilisateur ne peut pas l'\u00e9diter mais il doit \u00eatre pr\u00e9sent dans la requ\u00eate de retour vers le serveur. Si l'ID est manquant, le syst\u00e8me ne peut pas savoir si c'est une M\u00e0J ou une cr\u00e9ation. En cas d'oubli de l'ID une nouvelle entit\u00e9 sera cr\u00e9e en BDD. La mani\u00e8re de g\u00e9rer ce probl\u00e8me est d'inclure des champs cach\u00e9s. (Pour hibernate le champ version permet d'\u00e9viter les conflits de mise \u00e0 jour) <input type=\"hidden\" th:field=\"*{id}\"/> <input type=\"hidden\" th:field=\"*{version}\"/> Dans la prochaine \u00e9tape nous allons utiliser dans fragments dans nos pages HTML pour \u00e9viter de r\u00e9p\u00e9ter du code. index.html <!DOCTYPE html> <html> <head lang=\"en\"> <title>Spring boot Web app</title> <!-- Inclusion d'un fragment, uniquement visible quand execut\u00e9 par spring --> <!-- La mise en commentaire permet de faire afficher la page dans le browser sans erreur --> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> </div> </body> </html> fragments/headerinc.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\"> <head lang=\"en\" th:fragment=\"head\"> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /> <link href=\"http://cdn.jsdelivr.net/webjars/bootstrap/3.3.4/css/bootstrap.min.css\" th:href=\"@{/webjars/bootstrap/3.3.4/css/bootstrap.min.css}\" rel=\"stylesheet\" media=\"screen\" /> <script src=\"http://cdn.jsdelivr.net/webjars/jquery/2.1.4/jquery.min.js\" th:src=\"@{/webjars/jquery/2.1.4/jquery.min.js}\"></script> <link href=\"../../static/css/boot.css\" th:href=\"@{../css/boot.css}\" rel=\"stylesheet\" media=\"screen\" /> </head> <body> </body> </html> fragments/menu.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\"> <head lang=\"en\"> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/> <link href=\"http://cdn.jsdelivr.net/webjars/bootstrap/3.3.4/css/bootstrap.min.css\" th:href=\"@{/webjars/bootstrap/3.3.4/css/bootstrap.min.css}\" rel=\"stylesheet\" media=\"screen\"/> <script src=\"http://cdn.jsdelivr.net/webjars/jquery/2.1.4/jquery.min.js\" th:src=\"@{/webjars/jquery/2.1.4/jquery.min.js}\"></script> <link href=\"../../static/css/boot.css\" th:href=\"@{../css/boot.css}\" rel=\"stylesheet\" media=\"screen\" /> </head> <body> <div class=\"container\"> <div th:fragment=\"header\"> <nav class=\"navbar navbar-default\"> <div class=\"container-fluid\"> <div class=\"navbar-header\"> <a class=\"navbar-brand\" href=\"#\" th:href=\"@{/}\">Home</a> <ul class=\"nav navbar-nav\"> <li><a href=\"#\" th:href=\"@{/products}\">Products</a></li> <li><a href=\"#\" th:href=\"@{/product/new}\">Create Product</a></li> </ul> </div> </div> </nav> <div class=\"jumbotron\"> <div class=\"row text-center\"> <div class=\"\"> <h2>Spring Framework</h2> <h3>Spring Boot Web App</h3> </div> </div> <div class=\"row text-center\"> <img alt=\"boots\" src=\"images/boots.jpg\" width=\"300\" th:src=\"@{../../images/boots.jpg}\"/> </div> </div> </div> </div> </body> </html> Puis nous allons ajouter les vues produit products.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\"> <head lang=\"en\"> <title>Spring Framework</title> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> <div th:if=\"${not #lists.isEmpty(products)}\"> <form th:action=\"@{/logout}\" method=\"post\"> <div class=\"col-sm-10\"> <h2>Product Listing</h2> </div> <div class=\"col-sm-2\" style=\"padding-top: 30px;\"> <span sec:authorize=\"isAuthenticated()\"> <input type=\"submit\" value=\"Sign Out\" /> </span> </div> </form> <table class=\"table table-striped\"> <tr> <th>Id</th> <th>Product Id</th> <th>Description</th> <th>Price</th> <th sec:authorize=\"hasAnyRole('ROLE_USER','ROLE_ADMIN')\">View</th> <th sec:authorize=\"hasRole('ROLE_ADMIN')\">Edit</th> <th sec:authorize=\"hasRole('ROLE_ADMIN')\">Delete</th> </tr> <tr th:each=\"product : ${products}\"> <td th:text=\"${product.id}\"><a href=\"/product/${product.id}\">Id</a></td> <!-- la notation th est equivalente au java Product Id permet d'avoir un affichage avec un browser seul--> <td th:text=\"${product.productId}\">Product Id</td> <td th:text=\"${product.description}\">descirption</td> <td th:text=\"${product.price}\">price</td> <td sec:authorize=\"hasAnyRole('ROLE_USER','ROLE_ADMIN')\"><a th:href=\"${'/product/show/' + product.id}\">View</a></td> <td sec:authorize=\"hasRole('ROLE_ADMIN')\"><a th:href=\"${'/product/edit/' + product.id}\">Edit</a></td> <td sec:authorize=\"hasRole('ROLE_ADMIN')\"><a th:href=\"${'/product/delete/' + product.id}\">Delete</a></td> </tr> </table> </div> </div> </body> </html> productshow.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\"> <head lang=\"en\"> <title>Spring Framework</title> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> <form class=\"form-horizontal\" th:action=\"@{/logout}\" method=\"post\"> <div class=\"form-group\"> <div class=\"col-sm-10\"><h2>Product Details</h2></div> <div class=\"col-sm-2\" style=\"padding-top: 25px;\"> <span sec:authorize=\"isAuthenticated()\"> <input type=\"submit\" value=\"Sign Out\"/> </span> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Product Id:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.id}\">Product Id</p></div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Product Bar Code:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.productId}\">Product Bar code</p></div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Description:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.description}\">description</p> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Price:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.price}\">Priceaddd</p> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Image Url:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.imageUrl}\">url....</p> </div> </div> </form> </div> </body> </html> productform.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\"> <head lang=\"en\"> <title>Spring Framework</title> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> <form class=\"form-horizontal\" th:action=\"@{/logout}\" method=\"post\"> <div class=\"form-group\"> <div class=\"col-sm-10\"> <h2>Product Create/Update</h2></div> <div class=\"col-sm-2\" style=\"padding-top: 30px;\"> <input type=\"submit\" value=\"Sign Out\"/> </div> </div> </form> <div> <form class=\"form-horizontal\" th:object=\"${product}\" th:action=\"@{/product}\" method=\"post\"> <input type=\"hidden\" th:field=\"*{id}\"/> <input type=\"hidden\" th:field=\"*{version}\"/> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Bar Code:</label> <div class=\"col-sm-10\"> <input type=\"text\" class=\"form-control\" th:field=\"*{productId}\"/> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Description:</label> <div class=\"col-sm-10\"> <input type=\"text\" class=\"form-control\" th:field=\"*{description}\"/> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Price:</label> <div class=\"col-sm-10\"> <input type=\"text\" class=\"form-control\" th:field=\"*{price}\"/> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Image Url:</label> <div class=\"col-sm-10\"> <input type=\"text\" class=\"form-control\" th:field=\"*{imageUrl}\"/> </div> </div> <div class=\"row\"> <button type=\"submit\" class=\"btn btn-default\">Submit</button> </div> </form> </div> </div> </body> </html> Partie 3 S\u00e9curit\u00e9 / R\u00f4les et permissions Ce que nous voulons r\u00e9aliser: Pour un utilisateur pas authentifi\u00e9: Vue page d'accueil et liste de produits. Pour un utilisateur authentifi\u00e9 (R\u00f4le USER) vue en plus des d\u00e9tails du produit. Pour un utilisateur authentifi\u00e9 (R\u00f4le ADMIN) CRUD sur les produits. A faire: Ajout d\u00e9pendance thymeleaf-extras-springsecurity5 Ajout de la page login.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Login Form</title> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> <div th:if=\"${param.error}\"> <label style=\"color: red\">Invalid username and password.</label> </div> <div th:if=\"${param.logout}\"> <label> You have been logged out. </label> </div> <form th:action=\"@{/login}\" method=\"post\"> <table class=\"table table-striped\"> <tr> <td><label> User Name : <input type=\"text\" name=\"username\" /> </label></td> </tr> <tr> <td><label> Password : <input type=\"password\" name=\"password\" /> </label></td> </tr> <tr> <td> <button type=\"submit\" class=\"btn btn-default\">Sign In</button> </td> </tr> </table> </form> </div> </body> </html> Ajout dans le ProductController de la gestion de la page login Modification du controller de s\u00e9curit\u00e9: Sp\u00e9cifier les url n\u00e9cessitant de s\u00e9curit\u00e9. Pour toutes les autres rajouter le code suivant: .anyRequest().permitAll() .and().formLogin().loginPage(\"/login\").permitAll() .and().logout().permitAll(); R\u00e9utiliser le bean de cr\u00e9ation d'utilisateurs du TP Thymleaf-security Ajout dans le menu d'une condition de cr\u00e9ation de product: sec:authorize=\"hasRole('ROLE_ADMIN')\" Partie 4 S\u00e9curisation de l'application avec la BDD Cr\u00e9ation des entit\u00e9es JPA. Bien lire les commentaires sur les classes. Les classes Roles et User ont une relation multivaleur (many-to-many) qui d\u00e9termine que pour chaque enregistrement d'une table, il peut y avoir aucun, un ou plusieurs enregistrements d'une autre table qui lui soit li\u00e9s. package com.boot.entities; /** * Cette interface permet d avoir une base commune entre les classes User et Role */ public interface DomainObject { Integer getId(); void setId(Integer id); } package com.boot.entities; import javax.persistence.*; import java.util.Date; //Permer meme avec heritage de ne pas generer une table pour cet objet @MappedSuperclass public class AbstractDomainClass implements DomainObject { @Id @GeneratedValue(strategy = GenerationType.AUTO) Integer id; @Version private Integer version; private Date dateCreated; private Date lastUpdated; @Override public Integer getId() { return this.id; } @Override public void setId(Integer id) { this.id = id; } public Integer getVersion() { return version; } public void setVersion(Integer version) { this.version = version; } public Date getDateCreated() { return dateCreated; } public Date getLastUpdated() { return lastUpdated; } //Permet de s assurer que la date est bien mise a jour a chaque update en BDD @PreUpdate @PrePersist public void updateTimeStamps() { lastUpdated = new Date(); if (dateCreated==null) { dateCreated = new Date(); } } } package com.boot.entities; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.JoinTable; import javax.persistence.ManyToMany; import java.util.ArrayList; import java.util.List; @Entity public class Role extends AbstractDomainClass { private String role; @ManyToMany(fetch = FetchType.EAGER) @JoinTable // ~ defaults to @JoinTable(name = \"USER_ROLE\", joinColumns = @JoinColumn(name = \"role_id\"), // inverseJoinColumns = @joinColumn(name = \"user_id\")) private List<User> users = new ArrayList<>(); public String getRole() { return role; } public void setRole(String role) { this.role = role; } public List<User> getUsers() { return users; } public void setUsers(List<User> users) { this.users = users; } public void addUser(User user){ if(!this.users.contains(user)){ this.users.add(user); } if(!user.getRoles().contains(this)){ user.getRoles().add(this); } } public void removeUser(User user){ this.users.remove(user); user.getRoles().remove(this); } } package com.boot.entities; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity public class User extends AbstractDomainClass { private String username; //Le mot de passe est annote Transient afin de ne pas stoquer le mot de passe en clair //mais d utiliser celui encrypte @Transient private String password; private String encryptedPassword; private Boolean enabled = true; @ManyToMany(fetch = FetchType.EAGER) @JoinTable // ~ defaults to @JoinTable(name = \"USER_ROLE\", joinColumns = @JoinColumn(name = \"user_id\"), // inverseJoinColumns = @joinColumn(name = \"role_id\")) private List<Role> roles = new ArrayList<>(); private Integer failedLoginAttempts = 0; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getEncryptedPassword() { return encryptedPassword; } public void setEncryptedPassword(String encryptedPassword) { this.encryptedPassword = encryptedPassword; } public Boolean getEnabled() { return enabled; } public void setEnabled(Boolean enabled) { this.enabled = enabled; } public List<Role> getRoles() { return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } public void addRole(Role role){ if(!this.roles.contains(role)){ this.roles.add(role); } if(!role.getUsers().contains(this)){ role.getUsers().add(this); } } public void removeRole(Role role){ this.roles.remove(role); role.getUsers().remove(this); } public Integer getFailedLoginAttempts() { return failedLoginAttempts; } public void setFailedLoginAttempts(Integer failedLoginAttempts) { this.failedLoginAttempts = failedLoginAttempts; } } Repositories JPA Nous allons cr\u00e9er un UserRepository et un RoleRepository sur le m\u00eame exemple que le ProductRepository. Dans UserRepository ajouter la m\u00e9thode User findByUsername(String username); Les classes d'impl\u00e9mentation seront g\u00e9n\u00e9r\u00e9es automatiquement par Spring JPA. Services JPA Ajouter : package com.boot.services; import java.util.List; public interface CRUDService<T> { List<?> listAll(); T getById(Integer id); T saveOrUpdate(T domainObject); void delete(Integer id); } RoleService et UserService \u00e9tendent CRUDService qui d\u00e9finit les op\u00e9rations CRUD de base sur les entit\u00e9s. UserService , avec la m\u00e9thode suppl\u00e9mentaire User findByUsername(String username); , est une interface de service plus sp\u00e9cialis\u00e9e pour les op\u00e9rations CRUD sur User . Nous avons rendu les interfaces de service g\u00e9n\u00e9riques pour masquer nos impl\u00e9mentations de service en utilisant le design pattern Fa\u00e7ade. Les impl\u00e9mentations peuvent \u00eatre Spring Data JPA avec r\u00e9f\u00e9rentiel, DAO, ou m\u00eame JDBC simple, ou un service Web externe. Le code client n'a pas besoin de conna\u00eetre l'impl\u00e9mentation. En utilisant des interfaces, nous sommes en mesure de tirer parti de plusieurs impl\u00e9mentations concr\u00e8tes des services. Cr\u00e9er les trois classes (idem que ProductService) Completer UserServiceImpl package com.boot.services; import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Profile; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import com.boot.entities.User; import com.boot.repositories.UserRepository; import com.boot.services.security.EncryptionService; ... public class UserServiceImpl implements UserService { // a injecter private UserRepository userRepository; ... // a injecter private EncryptionService encryptionService; .... @Override public List<?> listAll() { ... return users; } @Override public User getById(Integer id) { return ... } @Override public User saveOrUpdate(User domainObject) { if(domainObject.getPassword() != null){ domainObject.setEncryptedPassword(encryptionService.encryptString(domainObject.getPassword())); } return ... } @Override @Transactional public void delete(Integer id) { ... } @Override public User findByUsername(String username) { return ... } } Completer RoleServiceImpl package com.boot.services; import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Profile; import org.springframework.stereotype.Service; import com.boot.entities.Role; import com.boot.repositories.RoleRepository; ... public class RoleServiceImpl implements RoleService { //inject private RoleRepository roleRepository; ... @Override public List<?> listAll() { ... return roles; } @Override public Role getById(Integer id) { return ... } @Override public Role saveOrUpdate(Role domainObject) { return ... } @Override public void delete(Integer id) { ... } } Cryptage du mot de passe Ajout des d\u00e9pendances suivantes <dependency> <groupId>org.jasypt</groupId> <artifactId>jasypt-springsecurity4</artifactId> <version>1.9.3</version> </dependency> <dependency> <groupId>com.github.ulisesbocchio</groupId> <artifactId>jasypt-spring-boot-starter</artifactId> <version>3.0.3</version> </dependency> Dans la classe placer les bonnes annotations package com.boot.configuration; import org.jasypt.util.password.StrongPasswordEncryptor; ... public class CommonBeanConfig { ... public StrongPasswordEncryptor strongEncryptor() { StrongPasswordEncryptor encryptor = new StrongPasswordEncryptor(); return encryptor; } } Ajout de EncryptionService package com.boot.services.security; public interface EncryptionService { String encryptString(String input); boolean checkPassword(String plainPassword, String encryptedPassword); } Impl\u00e9menter EncryptionServiceImpl en utilisant org.jasypt.util.password.StrongPasswordEncryptor Spring Security fournit une interface UserDetailsService pour rechercher le nom d'utilisateur, le mot de passe et GrantedAuthorities pour tout utilisateur donn\u00e9. Cette interface ne fournit qu'une seule m\u00e9thode, loadUserByUsername (). Cette m\u00e9thode renvoie une impl\u00e9mentation de l'interface UserDetails de Spring Security qui fournit des informations utilisateur. Compl\u00e9ter et ajouter tous les setters n\u00e9cessaires. package com.boot.services.security; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import java.util.Collection; public class UserDetailsImpl implements UserDetails { private Collection<SimpleGrantedAuthority> authorities; private String username; private String password; private Boolean enabled = true; ... public void setAuthorities(Collection<SimpleGrantedAuthority> authorities) { this.authorities = authorities; } } Dans cette classe, nous avons d\u00e9fini les champs de notre mod\u00e8le de donn\u00e9es et leurs m\u00e9thodes setter correspondantes. Le SimpleGrantedAuthority que nous avons d\u00e9finit est une impl\u00e9mentation Spring Security d'une autorit\u00e9 que nous convertirons de notre r\u00f4le. Pensez \u00e0 une autorit\u00e9 comme \u00e9tant une \u00abpermission\u00bb ou un \u00abdroit\u00bb g\u00e9n\u00e9ralement exprim\u00e9 sous forme de cha\u00eene de caract\u00e8re. Nous devons fournir une impl\u00e9mentation de la m\u00e9thode loadUserByUsername () de UserDetailsService . Mais le d\u00e9fi est que la m\u00e9thode findByUsername () de notre UserService renvoie une entit\u00e9 User , tandis que Spring Security attend un objet UserDetails de la m\u00e9thode loadUserByUsername () . Nous allons cr\u00e9er un convertisseur pour cela afin de convertir l'impl\u00e9mentation User en UserDetails . Compl\u00e9ter: package com.boot.services.security; import java.util.ArrayList; import java.util.Collection; import org.springframework.core.convert.converter.Converter; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component; import com.boot.entities.User; ... public class UserToUserDetails implements Converter<User, UserDetails> { @Override public UserDetails convert(User user) { UserDetailsImpl userDetails = new UserDetailsImpl(); if (user != null) { userDetails.set...// tout setter Collection<SimpleGrantedAuthority> authorities = new ArrayList<>(); user.getRoles().forEach(role -> { authorities.add(new SimpleGrantedAuthority(role.getRole())); }); userDetails.setAuthorities(authorities); } return userDetails; } } Cette classe impl\u00e9mente l'interface Spring Core Coverter et surcharge la m\u00e9thode convert () qui accepte un objet User \u00e0 convertir. Le convertisseur \u00e9tant pr\u00eat, il est d\u00e9sormais facile d\u2019impl\u00e9menter l\u2019interface UserDetailsService . La classe d'impl\u00e9mentation est la suivante. package com.boot.services.security; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.core.convert.converter.Converter; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.stereotype.Service; import com.boot.entities.User; import com.boot.services.UserService; @Service(\"userDetailsService\") public class UserDetailsServiceImpl implements UserDetailsService { private UserService userService; // to set private Converter<User, UserDetails> userUserDetailsConverter; ... ... @Qualifier(value = \"userToUserDetails\") public void setUserUserDetailsConverter(Converter<User, UserDetails> userUserDetailsConverter) { this.userUserDetailsConverter = userUserDetailsConverter; } @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { return userUserDetailsConverter.convert(...//utiliser userService } } Configuration de la S\u00e9curit\u00e9 La classe de configuration de s\u00e9curit\u00e9 actuelle, SecurityConfiguration , \u00e9tend WebSecurityConfigurerAdapter pour configurer deux choses. Un fournisseur d'authentification et les URL de l'application \u00e0 prot\u00e9ger.Il reste \u00e0 enregistrer le fournisseur d'authentification DAO pour une utilisation avec Spring Security. Nous allons commencer par mettre en place un encodeur de mot de passe pour encoder les mots de passe pr\u00e9sents dans l'objet UserDetails renvoy\u00e9 par le configuredUserDetailsService . Nous allons d\u00e9finir un nouveau bean pour PasswordEncoder de Spring Security qui prend en charge le bean StrongPassordEncryptor . Rappelez-vous que nous avons cr\u00e9\u00e9 StrongPassordEncryptor plus t\u00f4t dans la classe de configuration CommonBeanConfig ? Compl\u00e9ter la classe package com.boot.configuration; import org.jasypt.springsecurity4.crypto.password.PasswordEncoder; import org.jasypt.util.password.StrongPasswordEncryptor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.dao.DaoAuthenticationProvider; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.provisioning.InMemoryUserDetailsManager; ... public class SecurityConfiguration extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(\"/product/edit/*\",\"/product/new\",\"/product/delete/*\",\"/product/show/*\").authenticated() .anyRequest().permitAll() .and().formLogin().loginPage(\"/login\").permitAll() .and().logout().permitAll(); http.csrf().disable(); http.headers().frameOptions().disable(); } ... public PasswordEncoder passwordEncoder(StrongPasswordEncryptor passwordEncryptor){ PasswordEncoder passwordEncoder = new PasswordEncoder(); passwordEncoder.setPasswordEncryptor(passwordEncryptor); return passwordEncoder; } ... public DaoAuthenticationProvider daoAuthenticationProvider(PasswordEncoder passwordEncoder, UserDetailsService userDetailsService){ DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider(); daoAuthenticationProvider.setPasswordEncoder(passwordEncoder); daoAuthenticationProvider.setUserDetailsService(userDetailsService); return daoAuthenticationProvider; } ... public void configureAuthManager(AuthenticationManagerBuilder authenticationManagerBuilder, @Qualifier(\"daoAuthenticationProvider\") AuthenticationProvider authenticationProvider){ authenticationManagerBuilder.authenticationProvider(authenticationProvider); } } PasswordEncoder va utiliser la biblioth\u00e8que Jasypt pour encoder le mot de passe et v\u00e9rifier que les mots de passe correspondent. Le UserDetailsService r\u00e9cup\u00e9rera l'objet User de la base de donn\u00e9es et le transf\u00e9rera \u00e0 Spring Security en tant qu'objet UserDetails . Initialisation de l'Application Pour les donn\u00e9es de d\u00e9part de l'application, nous avons une classe d'impl\u00e9mentation ApplicationListener qui est appel\u00e9e sur le ContextRefresedEvent au d\u00e9marrage. Dans cette classe, nous utiliserons Spring pour injecter les r\u00e9f\u00e9rentiels JPA UserRepository et RoleRepository . Nous allons cr\u00e9er deux entit\u00e9s User et deux Role et les enregistrer dans la base de donn\u00e9es au d\u00e9marrage de l'application. Supprimer la classe ProductLoader Compl\u00e9ter la classe suivante package com.boot.mocks; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.ApplicationListener; import org.springframework.context.event.ContextRefreshedEvent; import org.springframework.stereotype.Component; import com.boot.entities.Product; import com.boot.entities.Role; import com.boot.entities.User; import com.boot.repositories.ProductRepository; import com.boot.services.RoleService; import com.boot.services.UserService; ... public class SpringJpaBootstrap implements ApplicationListener<ContextRefreshedEvent> { private ProductRepository productRepository; //To inject private UserService userService; //To inject private RoleService roleService; //To inject private Logger log = LoggerFactory.getLogger(SpringJpaBootstrap.class); ... @Override public void onApplicationEvent(ContextRefreshedEvent event) { loadProducts(); loadUsers(); loadRoles(); assignUsersToUserRole(); assignUsersToAdminRole(); } private void loadProducts() { Product shirt = new Product(); shirt.setDescription(\" Chemise Lacouste\"); shirt.setPrice(18.95f); shirt.setImageUrl(\"https://www.vision-naire.com/wp-content/uploads/2016/11/T-SHIRT-V-150x150.jpg\"); shirt.setProductId(\"235268845711068308\"); productRepository.save(shirt); log.info(\"Saved Shirt - id: \" + shirt.getId()); Product pant = new Product(); pant.setDescription(\"Pantalon Hugo Boot\"); pant.setPrice(120.9f); pant.setImageUrl(\"https://www.vision-naire.com/wp-content/uploads/2020/06/jogging-visionnaire-2-100x100.jpg\"); pant.setProductId(\"168639393495335947\"); productRepository.save(pant); log.info(\"Saved Mug - id:\" + pant.getId()); } private void loadUsers() { User user1 = new User(); user1.setUsername(\"user\"); user1.setPassword(\"user\"); userService.saveOrUpdate(user1); User user2 = new User(); user2.setUsername(\"admin\"); user2.setPassword(\"admin\"); userService.saveOrUpdate(user2); } private void loadRoles() { Role role = ... // Cr\u00e9er et enregistrer les r\u00f4les \"ADMIN\" et \"USER\" } private void assignUsersToUserRole() { List<Role> roles = ... List<User> users = ... roles.forEach(role -> { if (role.getRole().equalsIgnoreCase(\"USER\")) { ... //assigner le r\u00f4le \u00e0 l'utilisateur \"user\" } }); } private void assignUsersToAdminRole() { List<Role> roles = ... List<User> users = ... roles.forEach(role -> { if (role.getRole().equalsIgnoreCase(\"ADMIN\")) { ... //assigner le r\u00f4le \u00e0 l'utilisateur \"admin\" } }); } } Thymleaf Security Actuellement, USER et ROLE sont r\u00e9f\u00e9renc\u00e9s \u00e0 partir du code de couche de pr\u00e9sentation comme ROLE_USER et ROLE_ADMIN. Cela \u00e9tait n\u00e9cessaire car nous nous appuyions sur le fournisseur d'authentification en m\u00e9moire de Spring Security pour g\u00e9rer nos utilisateurs et nos r\u00f4les, et la fonctionnalit\u00e9 interne de Spring Security mappe un r\u00f4le configur\u00e9 au nom de r\u00f4le pr\u00e9c\u00e9d\u00e9 de ROLE_. Avec le fournisseur d'authentification DAO, nos r\u00f4les sont mapp\u00e9s aux autorit\u00e9s telles quelles (nous l'avons fait dans le convertisseur UserToUserDetails ), et nous pouvons les r\u00e9f\u00e9rer directement \u00e0 partir du code en tant que USER et ADMIN. Le deuxi\u00e8me changement est apport\u00e9 par GrantedAuthority utilis\u00e9 par l'interface Spring Security UserDetails . Si vous vous en souvenez, nous avons mapp\u00e9 notre impl\u00e9mentation de r\u00f4le \u00e0 SimpleGrantedAuthority dans le convertisseur UserToUserDetails . Par cons\u00e9quent, dans les mod\u00e8les Thymeleaf, nous devons changer les expressions d'autorisation hasRole () et hasAnyRole () en hasAuthority () et hasAnyAuthority () Changer les templates menu et produit","title":"TP1"},{"location":"TP1/#tp1","text":"url: https://start.spring.io/starter.zip?name=webapp&groupId=com.boot&artifactId=webapp&version=0.0.1-SNAPSHOT&description=Demo+project+for+Spring+Boot&packageName=com.example.demo&type=maven-project&packaging=jar&javaVersion=1.8&language=java&bootVersion=2.3.3.RELEASE&dependencies=devtools&dependencies=h2&dependencies=data-jpa&dependencies=security&dependencies=thymeleaf&dependencies=web","title":"TP1"},{"location":"TP1/#partie-1-bdd","text":"L'utilisation de JPA (Java Persistence API) permet de s'abstraire du langage de requ\u00eate de la base de donn\u00e9es. H2 est une base de donn\u00e9es embarqu\u00e9e, en m\u00e9moire, \u00e9crite en Java qui permet de garder le build portable. La configuration de H2 est tr\u00e8s simple. Il suffit de l'ajouter dans le POM pour que Spring Boot cr\u00e9er automatiquement la database, cr\u00e9er les objets JDBC et configure Hibernate. Hibernate va \u00e0 son tour scanner toutes les annotations JPA et va cr\u00e9er automatiquement les tables dans la BDD. Connexion console : JDBC URL=url=jdbc:h2:mem:testdb","title":"Partie 1 BDD"},{"location":"TP1/#partie-2-mvc","text":"","title":"Partie 2 MVC"},{"location":"TP1/#crud","text":"L'acronyme CRUD (pour create, read, update, delete) d\u00e9signe les quatre op\u00e9rations de base pour la persistance des donn\u00e9es, en particulier le stockage d'informations en base de donn\u00e9es. Operation SQL HTTP Create INSERT POST Read SELECT GET Update UPDATE PUT Delete DELETE DELETE L'annotation @Autowired plac\u00e9e sur un setter permet de demander \u00e0 Spring de d'injecter une d\u00e9pendance. L'annotation @Service plac\u00e9e sur une classe permet de declarer \u00e0 Spring que la classe est un service. Cr\u00e9er une classe annot\u00e9e composant public class ProductLoader implements ApplicationListener<ContextRefreshedEvent>{} Y injecter le ProductRepository. Dans le onApplication event injecter plusieurs instances de produit dans le productRepository. Cr\u00e9er l'interface ProductService permettant au controller d'interragir avec le mod\u00e8le: public interface ProductService { Iterable<Product> listAllProducts(); Product getProductById(Integer id); Product saveProduct(Product product); void deleteProduct(Integer id); } Implementer le @Service ProductServiceImpl en mappant toutes les m\u00e9thodes sur le ProductRepository (\u00e0 injecter) Completer le controller suivant. Il doit utiliser le ProductService. @Controller public class ProductController { private ProductService productService; //GET sur /products public String list(Model model){ model.addAttribute(\"products\", .... return \"products\"; } //GET sur \"product/show/{id}\" public String showProduct(@PathVariable Integer id, Model model){ model.addAttribute(\"product\", ... return \"productshow\"; } //GET sur \"product/edit/{id}\" public String edit(@PathVariable Integer id, Model model){ model.addAttribute(\"product\",... return \"productform\"; } //GET sur\"product/new\" public String newProduct(Model model){ model.addAttribute(\"product\", new Product()); return \"productform\"; } //POST sur \"product\" public String saveProduct(Product product){ ... return \"redirect:/product/show/\" + product.getId(); } //GET sur \"product/delete/{id}\" public String delete(@PathVariable Integer id){ ... return \"redirect:/products\"; } }","title":"CRUD"},{"location":"TP1/#creation-mise-a-jour-dun-product","text":"La m\u00eame page HTML peut \u00eatre utilis\u00e9e pour cr\u00e9er et mettre \u00e0 jour les produits. L'astuce consiste \u00e0 faire en sorte que le controller retourne un objet vide pour une cr\u00e9ation et l'objet existant pour une mise \u00e0 jour. De cette fa\u00e7on il n'y aura pas de probl\u00e8mes d'objets null. Et toutes les propri\u00e9t\u00e9s non nulle peuvent se transformer en formulaire. La ligne suivante cr\u00e9e le formulaire dans Thymeleaf. <form class=\"form-horizontal\" th:object=\"${product}\" th:action=\"@{/product}\" method=\"post\"> Le tag th:object relie l'objet product au formulaire. Le tag th:action d\u00e9finit quelle url doit \u00eatre appel\u00e9e lors de la soumission du formulaire (/product) url. La m\u00e9thode post est aussi renseign\u00e9e. C'est donc le controller suivant qui va \u00eatre appel\u00e9: @RequestMapping(value = \"product\", method = RequestMethod.POST) public String saveProduct(Product product){ productService.saveProduct(product); return \"redirect:/product/\" + product.getId(); } Il retourne vers l'objet modifi\u00e9. L'\u00e9tape suivante est cruciale pour que les mise \u00e0 jour fonctionnent. Toutes les entit\u00e9s pr\u00e9sentes en BDD ont un ID. L'utilisateur ne peut pas l'\u00e9diter mais il doit \u00eatre pr\u00e9sent dans la requ\u00eate de retour vers le serveur. Si l'ID est manquant, le syst\u00e8me ne peut pas savoir si c'est une M\u00e0J ou une cr\u00e9ation. En cas d'oubli de l'ID une nouvelle entit\u00e9 sera cr\u00e9e en BDD. La mani\u00e8re de g\u00e9rer ce probl\u00e8me est d'inclure des champs cach\u00e9s. (Pour hibernate le champ version permet d'\u00e9viter les conflits de mise \u00e0 jour) <input type=\"hidden\" th:field=\"*{id}\"/> <input type=\"hidden\" th:field=\"*{version}\"/> Dans la prochaine \u00e9tape nous allons utiliser dans fragments dans nos pages HTML pour \u00e9viter de r\u00e9p\u00e9ter du code. index.html <!DOCTYPE html> <html> <head lang=\"en\"> <title>Spring boot Web app</title> <!-- Inclusion d'un fragment, uniquement visible quand execut\u00e9 par spring --> <!-- La mise en commentaire permet de faire afficher la page dans le browser sans erreur --> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> </div> </body> </html> fragments/headerinc.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\"> <head lang=\"en\" th:fragment=\"head\"> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /> <link href=\"http://cdn.jsdelivr.net/webjars/bootstrap/3.3.4/css/bootstrap.min.css\" th:href=\"@{/webjars/bootstrap/3.3.4/css/bootstrap.min.css}\" rel=\"stylesheet\" media=\"screen\" /> <script src=\"http://cdn.jsdelivr.net/webjars/jquery/2.1.4/jquery.min.js\" th:src=\"@{/webjars/jquery/2.1.4/jquery.min.js}\"></script> <link href=\"../../static/css/boot.css\" th:href=\"@{../css/boot.css}\" rel=\"stylesheet\" media=\"screen\" /> </head> <body> </body> </html> fragments/menu.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\"> <head lang=\"en\"> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/> <link href=\"http://cdn.jsdelivr.net/webjars/bootstrap/3.3.4/css/bootstrap.min.css\" th:href=\"@{/webjars/bootstrap/3.3.4/css/bootstrap.min.css}\" rel=\"stylesheet\" media=\"screen\"/> <script src=\"http://cdn.jsdelivr.net/webjars/jquery/2.1.4/jquery.min.js\" th:src=\"@{/webjars/jquery/2.1.4/jquery.min.js}\"></script> <link href=\"../../static/css/boot.css\" th:href=\"@{../css/boot.css}\" rel=\"stylesheet\" media=\"screen\" /> </head> <body> <div class=\"container\"> <div th:fragment=\"header\"> <nav class=\"navbar navbar-default\"> <div class=\"container-fluid\"> <div class=\"navbar-header\"> <a class=\"navbar-brand\" href=\"#\" th:href=\"@{/}\">Home</a> <ul class=\"nav navbar-nav\"> <li><a href=\"#\" th:href=\"@{/products}\">Products</a></li> <li><a href=\"#\" th:href=\"@{/product/new}\">Create Product</a></li> </ul> </div> </div> </nav> <div class=\"jumbotron\"> <div class=\"row text-center\"> <div class=\"\"> <h2>Spring Framework</h2> <h3>Spring Boot Web App</h3> </div> </div> <div class=\"row text-center\"> <img alt=\"boots\" src=\"images/boots.jpg\" width=\"300\" th:src=\"@{../../images/boots.jpg}\"/> </div> </div> </div> </div> </body> </html> Puis nous allons ajouter les vues produit products.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\"> <head lang=\"en\"> <title>Spring Framework</title> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> <div th:if=\"${not #lists.isEmpty(products)}\"> <form th:action=\"@{/logout}\" method=\"post\"> <div class=\"col-sm-10\"> <h2>Product Listing</h2> </div> <div class=\"col-sm-2\" style=\"padding-top: 30px;\"> <span sec:authorize=\"isAuthenticated()\"> <input type=\"submit\" value=\"Sign Out\" /> </span> </div> </form> <table class=\"table table-striped\"> <tr> <th>Id</th> <th>Product Id</th> <th>Description</th> <th>Price</th> <th sec:authorize=\"hasAnyRole('ROLE_USER','ROLE_ADMIN')\">View</th> <th sec:authorize=\"hasRole('ROLE_ADMIN')\">Edit</th> <th sec:authorize=\"hasRole('ROLE_ADMIN')\">Delete</th> </tr> <tr th:each=\"product : ${products}\"> <td th:text=\"${product.id}\"><a href=\"/product/${product.id}\">Id</a></td> <!-- la notation th est equivalente au java Product Id permet d'avoir un affichage avec un browser seul--> <td th:text=\"${product.productId}\">Product Id</td> <td th:text=\"${product.description}\">descirption</td> <td th:text=\"${product.price}\">price</td> <td sec:authorize=\"hasAnyRole('ROLE_USER','ROLE_ADMIN')\"><a th:href=\"${'/product/show/' + product.id}\">View</a></td> <td sec:authorize=\"hasRole('ROLE_ADMIN')\"><a th:href=\"${'/product/edit/' + product.id}\">Edit</a></td> <td sec:authorize=\"hasRole('ROLE_ADMIN')\"><a th:href=\"${'/product/delete/' + product.id}\">Delete</a></td> </tr> </table> </div> </div> </body> </html> productshow.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\" xmlns:sec=\"http://www.thymeleaf.org/extras/spring-security\"> <head lang=\"en\"> <title>Spring Framework</title> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> <form class=\"form-horizontal\" th:action=\"@{/logout}\" method=\"post\"> <div class=\"form-group\"> <div class=\"col-sm-10\"><h2>Product Details</h2></div> <div class=\"col-sm-2\" style=\"padding-top: 25px;\"> <span sec:authorize=\"isAuthenticated()\"> <input type=\"submit\" value=\"Sign Out\"/> </span> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Product Id:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.id}\">Product Id</p></div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Product Bar Code:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.productId}\">Product Bar code</p></div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Description:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.description}\">description</p> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Price:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.price}\">Priceaddd</p> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Image Url:</label> <div class=\"col-sm-10\"> <p class=\"form-control-static\" th:text=\"${product.imageUrl}\">url....</p> </div> </div> </form> </div> </body> </html> productform.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\"> <head lang=\"en\"> <title>Spring Framework</title> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> <form class=\"form-horizontal\" th:action=\"@{/logout}\" method=\"post\"> <div class=\"form-group\"> <div class=\"col-sm-10\"> <h2>Product Create/Update</h2></div> <div class=\"col-sm-2\" style=\"padding-top: 30px;\"> <input type=\"submit\" value=\"Sign Out\"/> </div> </div> </form> <div> <form class=\"form-horizontal\" th:object=\"${product}\" th:action=\"@{/product}\" method=\"post\"> <input type=\"hidden\" th:field=\"*{id}\"/> <input type=\"hidden\" th:field=\"*{version}\"/> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Bar Code:</label> <div class=\"col-sm-10\"> <input type=\"text\" class=\"form-control\" th:field=\"*{productId}\"/> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Description:</label> <div class=\"col-sm-10\"> <input type=\"text\" class=\"form-control\" th:field=\"*{description}\"/> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Price:</label> <div class=\"col-sm-10\"> <input type=\"text\" class=\"form-control\" th:field=\"*{price}\"/> </div> </div> <div class=\"form-group\"> <label class=\"col-sm-2 control-label\">Image Url:</label> <div class=\"col-sm-10\"> <input type=\"text\" class=\"form-control\" th:field=\"*{imageUrl}\"/> </div> </div> <div class=\"row\"> <button type=\"submit\" class=\"btn btn-default\">Submit</button> </div> </form> </div> </div> </body> </html>","title":"Cr\u00e9ation / mise \u00e0 jour d'un product"},{"location":"TP1/#partie-3-securite-roles-et-permissions","text":"Ce que nous voulons r\u00e9aliser: Pour un utilisateur pas authentifi\u00e9: Vue page d'accueil et liste de produits. Pour un utilisateur authentifi\u00e9 (R\u00f4le USER) vue en plus des d\u00e9tails du produit. Pour un utilisateur authentifi\u00e9 (R\u00f4le ADMIN) CRUD sur les produits. A faire: Ajout d\u00e9pendance thymeleaf-extras-springsecurity5 Ajout de la page login.html <!DOCTYPE html> <html xmlns:th=\"http://www.thymeleaf.org\"> <head> <title>Login Form</title> <!--/*/ <th:block th:include=\"fragments/headerinc :: head\"></th:block> /*/--> </head> <body> <div class=\"container\"> <!--/*/ <th:block th:include=\"fragments/menu :: header\"></th:block> /*/--> <div th:if=\"${param.error}\"> <label style=\"color: red\">Invalid username and password.</label> </div> <div th:if=\"${param.logout}\"> <label> You have been logged out. </label> </div> <form th:action=\"@{/login}\" method=\"post\"> <table class=\"table table-striped\"> <tr> <td><label> User Name : <input type=\"text\" name=\"username\" /> </label></td> </tr> <tr> <td><label> Password : <input type=\"password\" name=\"password\" /> </label></td> </tr> <tr> <td> <button type=\"submit\" class=\"btn btn-default\">Sign In</button> </td> </tr> </table> </form> </div> </body> </html> Ajout dans le ProductController de la gestion de la page login Modification du controller de s\u00e9curit\u00e9: Sp\u00e9cifier les url n\u00e9cessitant de s\u00e9curit\u00e9. Pour toutes les autres rajouter le code suivant: .anyRequest().permitAll() .and().formLogin().loginPage(\"/login\").permitAll() .and().logout().permitAll(); R\u00e9utiliser le bean de cr\u00e9ation d'utilisateurs du TP Thymleaf-security Ajout dans le menu d'une condition de cr\u00e9ation de product: sec:authorize=\"hasRole('ROLE_ADMIN')\"","title":"Partie 3 S\u00e9curit\u00e9 / R\u00f4les et permissions"},{"location":"TP1/#partie-4-securisation-de-lapplication-avec-la-bdd","text":"","title":"Partie 4 S\u00e9curisation de l'application avec la BDD"},{"location":"TP1/#creation-des-entitees-jpa","text":"Bien lire les commentaires sur les classes. Les classes Roles et User ont une relation multivaleur (many-to-many) qui d\u00e9termine que pour chaque enregistrement d'une table, il peut y avoir aucun, un ou plusieurs enregistrements d'une autre table qui lui soit li\u00e9s. package com.boot.entities; /** * Cette interface permet d avoir une base commune entre les classes User et Role */ public interface DomainObject { Integer getId(); void setId(Integer id); } package com.boot.entities; import javax.persistence.*; import java.util.Date; //Permer meme avec heritage de ne pas generer une table pour cet objet @MappedSuperclass public class AbstractDomainClass implements DomainObject { @Id @GeneratedValue(strategy = GenerationType.AUTO) Integer id; @Version private Integer version; private Date dateCreated; private Date lastUpdated; @Override public Integer getId() { return this.id; } @Override public void setId(Integer id) { this.id = id; } public Integer getVersion() { return version; } public void setVersion(Integer version) { this.version = version; } public Date getDateCreated() { return dateCreated; } public Date getLastUpdated() { return lastUpdated; } //Permet de s assurer que la date est bien mise a jour a chaque update en BDD @PreUpdate @PrePersist public void updateTimeStamps() { lastUpdated = new Date(); if (dateCreated==null) { dateCreated = new Date(); } } } package com.boot.entities; import javax.persistence.Entity; import javax.persistence.FetchType; import javax.persistence.JoinTable; import javax.persistence.ManyToMany; import java.util.ArrayList; import java.util.List; @Entity public class Role extends AbstractDomainClass { private String role; @ManyToMany(fetch = FetchType.EAGER) @JoinTable // ~ defaults to @JoinTable(name = \"USER_ROLE\", joinColumns = @JoinColumn(name = \"role_id\"), // inverseJoinColumns = @joinColumn(name = \"user_id\")) private List<User> users = new ArrayList<>(); public String getRole() { return role; } public void setRole(String role) { this.role = role; } public List<User> getUsers() { return users; } public void setUsers(List<User> users) { this.users = users; } public void addUser(User user){ if(!this.users.contains(user)){ this.users.add(user); } if(!user.getRoles().contains(this)){ user.getRoles().add(this); } } public void removeUser(User user){ this.users.remove(user); user.getRoles().remove(this); } } package com.boot.entities; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity public class User extends AbstractDomainClass { private String username; //Le mot de passe est annote Transient afin de ne pas stoquer le mot de passe en clair //mais d utiliser celui encrypte @Transient private String password; private String encryptedPassword; private Boolean enabled = true; @ManyToMany(fetch = FetchType.EAGER) @JoinTable // ~ defaults to @JoinTable(name = \"USER_ROLE\", joinColumns = @JoinColumn(name = \"user_id\"), // inverseJoinColumns = @joinColumn(name = \"role_id\")) private List<Role> roles = new ArrayList<>(); private Integer failedLoginAttempts = 0; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getEncryptedPassword() { return encryptedPassword; } public void setEncryptedPassword(String encryptedPassword) { this.encryptedPassword = encryptedPassword; } public Boolean getEnabled() { return enabled; } public void setEnabled(Boolean enabled) { this.enabled = enabled; } public List<Role> getRoles() { return roles; } public void setRoles(List<Role> roles) { this.roles = roles; } public void addRole(Role role){ if(!this.roles.contains(role)){ this.roles.add(role); } if(!role.getUsers().contains(this)){ role.getUsers().add(this); } } public void removeRole(Role role){ this.roles.remove(role); role.getUsers().remove(this); } public Integer getFailedLoginAttempts() { return failedLoginAttempts; } public void setFailedLoginAttempts(Integer failedLoginAttempts) { this.failedLoginAttempts = failedLoginAttempts; } }","title":"Cr\u00e9ation des entit\u00e9es JPA."},{"location":"TP1/#repositories-jpa","text":"Nous allons cr\u00e9er un UserRepository et un RoleRepository sur le m\u00eame exemple que le ProductRepository. Dans UserRepository ajouter la m\u00e9thode User findByUsername(String username); Les classes d'impl\u00e9mentation seront g\u00e9n\u00e9r\u00e9es automatiquement par Spring JPA.","title":"Repositories JPA"},{"location":"TP1/#services-jpa","text":"Ajouter : package com.boot.services; import java.util.List; public interface CRUDService<T> { List<?> listAll(); T getById(Integer id); T saveOrUpdate(T domainObject); void delete(Integer id); } RoleService et UserService \u00e9tendent CRUDService qui d\u00e9finit les op\u00e9rations CRUD de base sur les entit\u00e9s. UserService , avec la m\u00e9thode suppl\u00e9mentaire User findByUsername(String username); , est une interface de service plus sp\u00e9cialis\u00e9e pour les op\u00e9rations CRUD sur User . Nous avons rendu les interfaces de service g\u00e9n\u00e9riques pour masquer nos impl\u00e9mentations de service en utilisant le design pattern Fa\u00e7ade. Les impl\u00e9mentations peuvent \u00eatre Spring Data JPA avec r\u00e9f\u00e9rentiel, DAO, ou m\u00eame JDBC simple, ou un service Web externe. Le code client n'a pas besoin de conna\u00eetre l'impl\u00e9mentation. En utilisant des interfaces, nous sommes en mesure de tirer parti de plusieurs impl\u00e9mentations concr\u00e8tes des services. Cr\u00e9er les trois classes (idem que ProductService) Completer UserServiceImpl package com.boot.services; import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Profile; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import com.boot.entities.User; import com.boot.repositories.UserRepository; import com.boot.services.security.EncryptionService; ... public class UserServiceImpl implements UserService { // a injecter private UserRepository userRepository; ... // a injecter private EncryptionService encryptionService; .... @Override public List<?> listAll() { ... return users; } @Override public User getById(Integer id) { return ... } @Override public User saveOrUpdate(User domainObject) { if(domainObject.getPassword() != null){ domainObject.setEncryptedPassword(encryptionService.encryptString(domainObject.getPassword())); } return ... } @Override @Transactional public void delete(Integer id) { ... } @Override public User findByUsername(String username) { return ... } } Completer RoleServiceImpl package com.boot.services; import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Profile; import org.springframework.stereotype.Service; import com.boot.entities.Role; import com.boot.repositories.RoleRepository; ... public class RoleServiceImpl implements RoleService { //inject private RoleRepository roleRepository; ... @Override public List<?> listAll() { ... return roles; } @Override public Role getById(Integer id) { return ... } @Override public Role saveOrUpdate(Role domainObject) { return ... } @Override public void delete(Integer id) { ... } }","title":"Services JPA"},{"location":"TP1/#cryptage-du-mot-de-passe","text":"Ajout des d\u00e9pendances suivantes <dependency> <groupId>org.jasypt</groupId> <artifactId>jasypt-springsecurity4</artifactId> <version>1.9.3</version> </dependency> <dependency> <groupId>com.github.ulisesbocchio</groupId> <artifactId>jasypt-spring-boot-starter</artifactId> <version>3.0.3</version> </dependency> Dans la classe placer les bonnes annotations package com.boot.configuration; import org.jasypt.util.password.StrongPasswordEncryptor; ... public class CommonBeanConfig { ... public StrongPasswordEncryptor strongEncryptor() { StrongPasswordEncryptor encryptor = new StrongPasswordEncryptor(); return encryptor; } } Ajout de EncryptionService package com.boot.services.security; public interface EncryptionService { String encryptString(String input); boolean checkPassword(String plainPassword, String encryptedPassword); } Impl\u00e9menter EncryptionServiceImpl en utilisant org.jasypt.util.password.StrongPasswordEncryptor Spring Security fournit une interface UserDetailsService pour rechercher le nom d'utilisateur, le mot de passe et GrantedAuthorities pour tout utilisateur donn\u00e9. Cette interface ne fournit qu'une seule m\u00e9thode, loadUserByUsername (). Cette m\u00e9thode renvoie une impl\u00e9mentation de l'interface UserDetails de Spring Security qui fournit des informations utilisateur. Compl\u00e9ter et ajouter tous les setters n\u00e9cessaires. package com.boot.services.security; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import java.util.Collection; public class UserDetailsImpl implements UserDetails { private Collection<SimpleGrantedAuthority> authorities; private String username; private String password; private Boolean enabled = true; ... public void setAuthorities(Collection<SimpleGrantedAuthority> authorities) { this.authorities = authorities; } } Dans cette classe, nous avons d\u00e9fini les champs de notre mod\u00e8le de donn\u00e9es et leurs m\u00e9thodes setter correspondantes. Le SimpleGrantedAuthority que nous avons d\u00e9finit est une impl\u00e9mentation Spring Security d'une autorit\u00e9 que nous convertirons de notre r\u00f4le. Pensez \u00e0 une autorit\u00e9 comme \u00e9tant une \u00abpermission\u00bb ou un \u00abdroit\u00bb g\u00e9n\u00e9ralement exprim\u00e9 sous forme de cha\u00eene de caract\u00e8re. Nous devons fournir une impl\u00e9mentation de la m\u00e9thode loadUserByUsername () de UserDetailsService . Mais le d\u00e9fi est que la m\u00e9thode findByUsername () de notre UserService renvoie une entit\u00e9 User , tandis que Spring Security attend un objet UserDetails de la m\u00e9thode loadUserByUsername () . Nous allons cr\u00e9er un convertisseur pour cela afin de convertir l'impl\u00e9mentation User en UserDetails . Compl\u00e9ter: package com.boot.services.security; import java.util.ArrayList; import java.util.Collection; import org.springframework.core.convert.converter.Converter; import org.springframework.security.core.authority.SimpleGrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component; import com.boot.entities.User; ... public class UserToUserDetails implements Converter<User, UserDetails> { @Override public UserDetails convert(User user) { UserDetailsImpl userDetails = new UserDetailsImpl(); if (user != null) { userDetails.set...// tout setter Collection<SimpleGrantedAuthority> authorities = new ArrayList<>(); user.getRoles().forEach(role -> { authorities.add(new SimpleGrantedAuthority(role.getRole())); }); userDetails.setAuthorities(authorities); } return userDetails; } } Cette classe impl\u00e9mente l'interface Spring Core Coverter et surcharge la m\u00e9thode convert () qui accepte un objet User \u00e0 convertir. Le convertisseur \u00e9tant pr\u00eat, il est d\u00e9sormais facile d\u2019impl\u00e9menter l\u2019interface UserDetailsService . La classe d'impl\u00e9mentation est la suivante. package com.boot.services.security; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.core.convert.converter.Converter; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.stereotype.Service; import com.boot.entities.User; import com.boot.services.UserService; @Service(\"userDetailsService\") public class UserDetailsServiceImpl implements UserDetailsService { private UserService userService; // to set private Converter<User, UserDetails> userUserDetailsConverter; ... ... @Qualifier(value = \"userToUserDetails\") public void setUserUserDetailsConverter(Converter<User, UserDetails> userUserDetailsConverter) { this.userUserDetailsConverter = userUserDetailsConverter; } @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { return userUserDetailsConverter.convert(...//utiliser userService } }","title":"Cryptage du mot de passe"},{"location":"TP1/#configuration-de-la-securite","text":"La classe de configuration de s\u00e9curit\u00e9 actuelle, SecurityConfiguration , \u00e9tend WebSecurityConfigurerAdapter pour configurer deux choses. Un fournisseur d'authentification et les URL de l'application \u00e0 prot\u00e9ger.Il reste \u00e0 enregistrer le fournisseur d'authentification DAO pour une utilisation avec Spring Security. Nous allons commencer par mettre en place un encodeur de mot de passe pour encoder les mots de passe pr\u00e9sents dans l'objet UserDetails renvoy\u00e9 par le configuredUserDetailsService . Nous allons d\u00e9finir un nouveau bean pour PasswordEncoder de Spring Security qui prend en charge le bean StrongPassordEncryptor . Rappelez-vous que nous avons cr\u00e9\u00e9 StrongPassordEncryptor plus t\u00f4t dans la classe de configuration CommonBeanConfig ? Compl\u00e9ter la classe package com.boot.configuration; import org.jasypt.springsecurity4.crypto.password.PasswordEncoder; import org.jasypt.util.password.StrongPasswordEncryptor; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Qualifier; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.dao.DaoAuthenticationProvider; import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; import org.springframework.security.core.userdetails.User; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.provisioning.InMemoryUserDetailsManager; ... public class SecurityConfiguration extends WebSecurityConfigurerAdapter { @Override protected void configure(HttpSecurity http) throws Exception { http.authorizeRequests() .antMatchers(\"/product/edit/*\",\"/product/new\",\"/product/delete/*\",\"/product/show/*\").authenticated() .anyRequest().permitAll() .and().formLogin().loginPage(\"/login\").permitAll() .and().logout().permitAll(); http.csrf().disable(); http.headers().frameOptions().disable(); } ... public PasswordEncoder passwordEncoder(StrongPasswordEncryptor passwordEncryptor){ PasswordEncoder passwordEncoder = new PasswordEncoder(); passwordEncoder.setPasswordEncryptor(passwordEncryptor); return passwordEncoder; } ... public DaoAuthenticationProvider daoAuthenticationProvider(PasswordEncoder passwordEncoder, UserDetailsService userDetailsService){ DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider(); daoAuthenticationProvider.setPasswordEncoder(passwordEncoder); daoAuthenticationProvider.setUserDetailsService(userDetailsService); return daoAuthenticationProvider; } ... public void configureAuthManager(AuthenticationManagerBuilder authenticationManagerBuilder, @Qualifier(\"daoAuthenticationProvider\") AuthenticationProvider authenticationProvider){ authenticationManagerBuilder.authenticationProvider(authenticationProvider); } } PasswordEncoder va utiliser la biblioth\u00e8que Jasypt pour encoder le mot de passe et v\u00e9rifier que les mots de passe correspondent. Le UserDetailsService r\u00e9cup\u00e9rera l'objet User de la base de donn\u00e9es et le transf\u00e9rera \u00e0 Spring Security en tant qu'objet UserDetails .","title":"Configuration de la S\u00e9curit\u00e9"},{"location":"TP1/#initialisation-de-lapplication","text":"Pour les donn\u00e9es de d\u00e9part de l'application, nous avons une classe d'impl\u00e9mentation ApplicationListener qui est appel\u00e9e sur le ContextRefresedEvent au d\u00e9marrage. Dans cette classe, nous utiliserons Spring pour injecter les r\u00e9f\u00e9rentiels JPA UserRepository et RoleRepository . Nous allons cr\u00e9er deux entit\u00e9s User et deux Role et les enregistrer dans la base de donn\u00e9es au d\u00e9marrage de l'application. Supprimer la classe ProductLoader Compl\u00e9ter la classe suivante package com.boot.mocks; import java.util.List; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.ApplicationListener; import org.springframework.context.event.ContextRefreshedEvent; import org.springframework.stereotype.Component; import com.boot.entities.Product; import com.boot.entities.Role; import com.boot.entities.User; import com.boot.repositories.ProductRepository; import com.boot.services.RoleService; import com.boot.services.UserService; ... public class SpringJpaBootstrap implements ApplicationListener<ContextRefreshedEvent> { private ProductRepository productRepository; //To inject private UserService userService; //To inject private RoleService roleService; //To inject private Logger log = LoggerFactory.getLogger(SpringJpaBootstrap.class); ... @Override public void onApplicationEvent(ContextRefreshedEvent event) { loadProducts(); loadUsers(); loadRoles(); assignUsersToUserRole(); assignUsersToAdminRole(); } private void loadProducts() { Product shirt = new Product(); shirt.setDescription(\" Chemise Lacouste\"); shirt.setPrice(18.95f); shirt.setImageUrl(\"https://www.vision-naire.com/wp-content/uploads/2016/11/T-SHIRT-V-150x150.jpg\"); shirt.setProductId(\"235268845711068308\"); productRepository.save(shirt); log.info(\"Saved Shirt - id: \" + shirt.getId()); Product pant = new Product(); pant.setDescription(\"Pantalon Hugo Boot\"); pant.setPrice(120.9f); pant.setImageUrl(\"https://www.vision-naire.com/wp-content/uploads/2020/06/jogging-visionnaire-2-100x100.jpg\"); pant.setProductId(\"168639393495335947\"); productRepository.save(pant); log.info(\"Saved Mug - id:\" + pant.getId()); } private void loadUsers() { User user1 = new User(); user1.setUsername(\"user\"); user1.setPassword(\"user\"); userService.saveOrUpdate(user1); User user2 = new User(); user2.setUsername(\"admin\"); user2.setPassword(\"admin\"); userService.saveOrUpdate(user2); } private void loadRoles() { Role role = ... // Cr\u00e9er et enregistrer les r\u00f4les \"ADMIN\" et \"USER\" } private void assignUsersToUserRole() { List<Role> roles = ... List<User> users = ... roles.forEach(role -> { if (role.getRole().equalsIgnoreCase(\"USER\")) { ... //assigner le r\u00f4le \u00e0 l'utilisateur \"user\" } }); } private void assignUsersToAdminRole() { List<Role> roles = ... List<User> users = ... roles.forEach(role -> { if (role.getRole().equalsIgnoreCase(\"ADMIN\")) { ... //assigner le r\u00f4le \u00e0 l'utilisateur \"admin\" } }); } }","title":"Initialisation de l'Application"},{"location":"TP1/#thymleaf-security","text":"Actuellement, USER et ROLE sont r\u00e9f\u00e9renc\u00e9s \u00e0 partir du code de couche de pr\u00e9sentation comme ROLE_USER et ROLE_ADMIN. Cela \u00e9tait n\u00e9cessaire car nous nous appuyions sur le fournisseur d'authentification en m\u00e9moire de Spring Security pour g\u00e9rer nos utilisateurs et nos r\u00f4les, et la fonctionnalit\u00e9 interne de Spring Security mappe un r\u00f4le configur\u00e9 au nom de r\u00f4le pr\u00e9c\u00e9d\u00e9 de ROLE_. Avec le fournisseur d'authentification DAO, nos r\u00f4les sont mapp\u00e9s aux autorit\u00e9s telles quelles (nous l'avons fait dans le convertisseur UserToUserDetails ), et nous pouvons les r\u00e9f\u00e9rer directement \u00e0 partir du code en tant que USER et ADMIN. Le deuxi\u00e8me changement est apport\u00e9 par GrantedAuthority utilis\u00e9 par l'interface Spring Security UserDetails . Si vous vous en souvenez, nous avons mapp\u00e9 notre impl\u00e9mentation de r\u00f4le \u00e0 SimpleGrantedAuthority dans le convertisseur UserToUserDetails . Par cons\u00e9quent, dans les mod\u00e8les Thymeleaf, nous devons changer les expressions d'autorisation hasRole () et hasAnyRole () en hasAuthority () et hasAnyAuthority () Changer les templates menu et produit","title":"Thymleaf Security"},{"location":"TP2/","text":"TP2 Partie 1 Exemple Personne Cr\u00e9er un controller ConsoleController d\u00e9di\u00e9 \u00e0 la console associant l'adresse /console \u00e0 la redirection vers h2-console Cr\u00e9er un controller MainController permettant de gerer les appels sur nos repository retournant les objets en JSON Voici les param\u00e8tres \u00e0 utiliser pour les deux prochaines m\u00e9thode: @RequestParam(name = \"method\", required = true, defaultValue = \"id\") String method, @RequestParam(name = \"value\", required = true) String value chaque m\u00e9thode devra avoir un switch prenant en entr\u00e9e method Associer l'adresse /person avec les m\u00e9thodes retournant qu'une valeur (dans le switch) Associer l'adresse /persons avec les m\u00e9thodes retournant une liste (dans le switch) Acceder \u00e0 la console et cr\u00e9er une querry permettant d'afficher toutes les personnes commen\u00e7ant par S Cr\u00e9er une nouvelle m\u00e9thode dans le PersonRepository findNameStartingByS et y mapper la query obtenue pr\u00e9c\u00e9demment sachant que dans le code ce n'est pas les tables et champs de la BDD qu'il faut utiliser mais ceux de l' Entity Refaire la m\u00eame query en language naturel (uniquement en java) Doc spring Cr\u00e9er deux autres query de type different de la premi\u00e8re Partie 2 Vraie BDD Cr\u00e9er les Entity Agent, Orders, Customer suivant le sch\u00e9ma ci dessous et la d\u00e9claration des tables. Pour le moment considerer les cl\u00e9s \u00e9trang\u00e8res comme des champs simples. Elles seront utilis\u00e9es dans la partie 3. CREATE TABLE \"AGENTS\" ( \"AGENT_CODE\" CHAR(6) NOT NULL PRIMARY KEY, \"AGENT_NAME\" CHAR(40), \"WORKING_AREA\" CHAR(35), \"COMMISSION\" NUMBER(10,2), \"PHONE_NO\" CHAR(15), \"COUNTRY\" VARCHAR2(25) ); CREATE TABLE \"CUSTOMER\" ( \"CUST_CODE\" VARCHAR2(6) NOT NULL PRIMARY KEY, \"CUST_NAME\" VARCHAR2(40) NOT NULL, \"CUST_CITY\" CHAR(35), \"WORKING_AREA\" VARCHAR2(35) NOT NULL, \"CUST_COUNTRY\" VARCHAR2(20) NOT NULL, \"GRADE\" NUMBER, \"OPENING_AMT\" NUMBER(12,2) NOT NULL, \"RECEIVE_AMT\" NUMBER(12,2) NOT NULL, \"PAYMENT_AMT\" NUMBER(12,2) NOT NULL, \"OUTSTANDING_AMT\" NUMBER(12,2) NOT NULL, \"PHONE_NO\" VARCHAR2(17) NOT NULL, \"AGENT_CODE\" CHAR(6) NOT NULL REFERENCES AGENTS ); CREATE TABLE \"ORDERS\" ( \"ORD_NUM\" NUMBER(6,0) NOT NULL PRIMARY KEY, \"ORD_AMOUNT\" NUMBER(12,2) NOT NULL, \"ADVANCE_AMOUNT\" NUMBER(12,2) NOT NULL, \"ORD_DATE\" DATE NOT NULL, \"CUST_CODE\" VARCHAR2(6) NOT NULL REFERENCES CUSTOMER, \"AGENT_CODE\" CHAR(6) NOT NULL REFERENCES AGENTS, \"ORD_DESCRIPTION\" VARCHAR2(60) NOT NULL ); Charger les donn\u00e9es de d\u00e9pot Github dataTP2 soit manuellement soit automatiquement. Cr\u00e9er les repository associ\u00e9s et ajouter des m\u00e9thodes pour: -- Trouver des agents par nom, trouver des agents \u00e0 la commission plus grande que la valeur en param\u00e8tre, trouver des agents par Working Area -- Trouver des customers par nom, Trouver des customers par ville et Trouver des customers par openingAtm plus grand que le param\u00e8tre -- Trouver des orders par agent code et Trouver des orders par orderAmount plus grand que le param\u00e8tre Cr\u00e9er des requ\u00e8tes de jointure pour chaque order r\u00e9cup\u00e9rer les valeurs associ\u00e9es d'agent et customer Dans le controller y ajouter les m\u00e9thodes de la m\u00eame fa\u00e7on que pour les personnes et y binder toutes les m\u00e9thodes. Partie 3 Optimisations remplacer pour les cl\u00e9s externes l'annotation @column par @ManyToOne @JoinColumn( name=\"nom de la colonne\", unique=false, nullable=false, updatable=true) et remplacer le type du champ par l'objet voulu. Afficher la liste des orders. Que constatez vous? Ecrire la r\u00e9ponse en commentaire apr\u00e8s la ligne public class ExoBddDaoApplication { Fin Supprimer le dossier target, zipper le projet de me l'envoyer pr mail. V\u00e9rifier l'envoi du mail (pas de mail de retour \u00e0 cause de la pi\u00e8ce jointe)","title":"TP2"},{"location":"TP2/#tp2","text":"","title":"TP2"},{"location":"TP2/#partie-1-exemple-personne","text":"Cr\u00e9er un controller ConsoleController d\u00e9di\u00e9 \u00e0 la console associant l'adresse /console \u00e0 la redirection vers h2-console Cr\u00e9er un controller MainController permettant de gerer les appels sur nos repository retournant les objets en JSON Voici les param\u00e8tres \u00e0 utiliser pour les deux prochaines m\u00e9thode: @RequestParam(name = \"method\", required = true, defaultValue = \"id\") String method, @RequestParam(name = \"value\", required = true) String value chaque m\u00e9thode devra avoir un switch prenant en entr\u00e9e method Associer l'adresse /person avec les m\u00e9thodes retournant qu'une valeur (dans le switch) Associer l'adresse /persons avec les m\u00e9thodes retournant une liste (dans le switch) Acceder \u00e0 la console et cr\u00e9er une querry permettant d'afficher toutes les personnes commen\u00e7ant par S Cr\u00e9er une nouvelle m\u00e9thode dans le PersonRepository findNameStartingByS et y mapper la query obtenue pr\u00e9c\u00e9demment sachant que dans le code ce n'est pas les tables et champs de la BDD qu'il faut utiliser mais ceux de l' Entity Refaire la m\u00eame query en language naturel (uniquement en java) Doc spring Cr\u00e9er deux autres query de type different de la premi\u00e8re","title":"Partie 1 Exemple Personne"},{"location":"TP2/#partie-2-vraie-bdd","text":"Cr\u00e9er les Entity Agent, Orders, Customer suivant le sch\u00e9ma ci dessous et la d\u00e9claration des tables. Pour le moment considerer les cl\u00e9s \u00e9trang\u00e8res comme des champs simples. Elles seront utilis\u00e9es dans la partie 3. CREATE TABLE \"AGENTS\" ( \"AGENT_CODE\" CHAR(6) NOT NULL PRIMARY KEY, \"AGENT_NAME\" CHAR(40), \"WORKING_AREA\" CHAR(35), \"COMMISSION\" NUMBER(10,2), \"PHONE_NO\" CHAR(15), \"COUNTRY\" VARCHAR2(25) ); CREATE TABLE \"CUSTOMER\" ( \"CUST_CODE\" VARCHAR2(6) NOT NULL PRIMARY KEY, \"CUST_NAME\" VARCHAR2(40) NOT NULL, \"CUST_CITY\" CHAR(35), \"WORKING_AREA\" VARCHAR2(35) NOT NULL, \"CUST_COUNTRY\" VARCHAR2(20) NOT NULL, \"GRADE\" NUMBER, \"OPENING_AMT\" NUMBER(12,2) NOT NULL, \"RECEIVE_AMT\" NUMBER(12,2) NOT NULL, \"PAYMENT_AMT\" NUMBER(12,2) NOT NULL, \"OUTSTANDING_AMT\" NUMBER(12,2) NOT NULL, \"PHONE_NO\" VARCHAR2(17) NOT NULL, \"AGENT_CODE\" CHAR(6) NOT NULL REFERENCES AGENTS ); CREATE TABLE \"ORDERS\" ( \"ORD_NUM\" NUMBER(6,0) NOT NULL PRIMARY KEY, \"ORD_AMOUNT\" NUMBER(12,2) NOT NULL, \"ADVANCE_AMOUNT\" NUMBER(12,2) NOT NULL, \"ORD_DATE\" DATE NOT NULL, \"CUST_CODE\" VARCHAR2(6) NOT NULL REFERENCES CUSTOMER, \"AGENT_CODE\" CHAR(6) NOT NULL REFERENCES AGENTS, \"ORD_DESCRIPTION\" VARCHAR2(60) NOT NULL ); Charger les donn\u00e9es de d\u00e9pot Github dataTP2 soit manuellement soit automatiquement. Cr\u00e9er les repository associ\u00e9s et ajouter des m\u00e9thodes pour: -- Trouver des agents par nom, trouver des agents \u00e0 la commission plus grande que la valeur en param\u00e8tre, trouver des agents par Working Area -- Trouver des customers par nom, Trouver des customers par ville et Trouver des customers par openingAtm plus grand que le param\u00e8tre -- Trouver des orders par agent code et Trouver des orders par orderAmount plus grand que le param\u00e8tre Cr\u00e9er des requ\u00e8tes de jointure pour chaque order r\u00e9cup\u00e9rer les valeurs associ\u00e9es d'agent et customer Dans le controller y ajouter les m\u00e9thodes de la m\u00eame fa\u00e7on que pour les personnes et y binder toutes les m\u00e9thodes.","title":"Partie 2 Vraie BDD"},{"location":"TP2/#partie-3-optimisations","text":"remplacer pour les cl\u00e9s externes l'annotation @column par @ManyToOne @JoinColumn( name=\"nom de la colonne\", unique=false, nullable=false, updatable=true) et remplacer le type du champ par l'objet voulu. Afficher la liste des orders. Que constatez vous? Ecrire la r\u00e9ponse en commentaire apr\u00e8s la ligne public class ExoBddDaoApplication {","title":"Partie 3 Optimisations"},{"location":"TP2/#fin","text":"Supprimer le dossier target, zipper le projet de me l'envoyer pr mail. V\u00e9rifier l'envoi du mail (pas de mail de retour \u00e0 cause de la pi\u00e8ce jointe)","title":"Fin"},{"location":"about/","text":"Liens utiles JPA JPA1 Doc spring Configuration properties Conf1 Conf2 Conf3 Autres Connexion sociale avec OAuth2 IHM web auto completion Vid\u00e9o auto configuration","title":"About"},{"location":"about/#liens-utiles","text":"","title":"Liens utiles"},{"location":"about/#jpa","text":"JPA1 Doc spring","title":"JPA"},{"location":"about/#configuration-properties","text":"Conf1 Conf2 Conf3","title":"Configuration properties"},{"location":"about/#autres","text":"Connexion sociale avec OAuth2 IHM web auto completion Vid\u00e9o auto configuration","title":"Autres"}]}