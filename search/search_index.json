{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Spring Boot Objectifs du cours D\u00e9couverte et utilisation de microservices Utiliser JPA pour communiquer avec des bases de donn\u00e9es Valider et s\u00e9curiser les donn\u00e9es Gestion d'erreurs Notions et d\u00e9finitions Microservice Les microservices sont une technique de d\u00e9veloppement logiciel \u2014 une variante de l'architecture orient\u00e9e services (SOA) \u2014 qui structure une application comme un ensemble de services faiblement coupl\u00e9s. Les microservices ind\u00e9pendants communiquent les uns avec les autres en utilisant des API ind\u00e9pendantes du langage de programmation. Des API REST sont souvent employ\u00e9es pour relier chaque microservice aux autres. Un avantage avanc\u00e9 est que lors d'un besoin critique de mise \u00e0 jour d'une ressource, seul le microservice contenant cette ressource sera mis \u00e0 jour, l'ensemble de l'application restant compatible avec la modification, contrairement \u00e0 la totalit\u00e9 de l'application dans une architecture classique. REST Rappels rapide REST: REST (pour REpresentational State Transfer) ne d\u00e9crit pas une impl\u00e9mentation mais un style d\u2019architecture qui suit diff\u00e9rents principes : client-serveur : les responsabilit\u00e9s sont s\u00e9par\u00e9es entre le client et le serveur. L\u2019interface utilisateur est s\u00e9par\u00e9e de celle du stockage des donn\u00e9es. Cela permet aux deux d\u2019\u00e9voluer ind\u00e9pendamment (contrairement \u00e0 des applications qui r\u00e9alisent des requ\u00eates directement en base de donn\u00e9es par exemple\u2026). sans \u00e9tat : la requ\u00eate envoy\u00e9e par le client doit \u00eatre auto-suffisante : ne pas n\u00e9cessiter de sauvegarder un \u00e9tat sur le serveur mise en cache : la possibilit\u00e9 pour le serveur de sp\u00e9cifier les r\u00e9ponses pouvant \u00eatre mises en cache une interface uniforme : chaque ressource est identifi\u00e9e unitairement, les ressources ont des repr\u00e9sentations d\u00e9finies un syst\u00e8me hi\u00e9rarchis\u00e9 par couche : les \u00e9tats de l\u2019application sont repr\u00e9sent\u00e9s par des ressources individuelles. L\u2019ensemble de l\u2019information n\u2019est pas envoy\u00e9e dans une ressource unique. \u00c0 noter qu\u2019on assimile \u00ab API REST \u00bb avec l\u2019application de ce style d\u2019architecture sur le protocole HTTP et en utilisant le format d\u2019\u00e9change de donn\u00e9es JSON. Avec le protocole HTTP d\u00e9finit les m\u00e9thodes suivantes: GET , POST , PUT , PATCH et DELETE . Exemple: Ressource collection, telle que http://api.exemple.com/collection/ GET : R\u00e9cup\u00e8re les URI des ressources membres de la ressource collection dans le corps de la r\u00e9ponse. POST : Cr\u00e9e une ressource membre dans la ressource collection en utilisant les instructions du corps de la requ\u00eate. L'URI de la ressource membre cr\u00e9\u00e9e est attribu\u00e9 automatiquement et retourn\u00e9 dans le champ d'en-t\u00eate Location de la r\u00e9ponse. PUT : Remplace toutes les repr\u00e9sentations des ressources membres de la ressource collection par la repr\u00e9sentation dans le corps de la requ\u00eate, ou cr\u00e9e la ressource collection si elle n'existe pas. PATCH :Met \u00e0 jour toutes les repr\u00e9sentations des ressources membres de la ressource collection en utilisant les instructions du corps de la requ\u00eate, ou cr\u00e9e \u00e9ventuellement la ressource collection si elle n'existe pas. DETELE : Supprime toutes les repr\u00e9sentations des ressources membres de la ressource collection. Plus d'infos: HTTP , REST MVC Pourquoi Spring Boot? D\u00e9finition : Spring est un Framework de d\u00e9veloppement d'applications Java, qui apporte plusieurs fonctionnalit\u00e9s comme Spring Security, SpringMVC, Spring Batch, Spring Data, etc. Ces Frameworks ont pour objectif de faciliter la t\u00e2che aux d\u00e9veloppeurs. Malheureusement, leurs mises en \u0153uvre deviennent tr\u00e8s complexes \u00e0 travers les fichiers de configuration XML qui ne cessent de grossir, et une gestion des d\u00e9pendances fastidieuse. C'est pour r\u00e9pondre \u00e0 cette inqui\u00e9tude que le projet Spring Boot a vu le jour. D\u00e9finition : Spring Boot est un sous projet de Spring qui vise \u00e0 rendre Spring plus facile d'utilisation en \u00e9limant plusieurs \u00e9tapes de configuration. L'objectif de Spring Boot est de permettre aux d\u00e9veloppeurs de se concentrer sur des t\u00e2ches techniques et non des t\u00e2ches de configurations, de d\u00e9ploiements, etc. Ce qui a pour cons\u00e9quences un gain de temps et de productivit\u00e9. Spring Boot apporte \u00e0 Spring une tr\u00e8s grande simplicit\u00e9 d'utilisation : Il facilite notamment la cr\u00e9ation, la configuration et le d\u00e9ploiement d'une application compl\u00e8te. On n'a plus besoin des fichiers XML \u00e0 configurer (pas besoin du fichier du descripteur de d\u00e9ploiement web.xml dans le cas d'une application web). Spring Boot permet de d\u00e9ployer tr\u00e8s facilement une application dans plusieurs environnements sans avoir \u00e0 \u00e9crire des scripts. Pour ce faire, une simple indication de l'environnement (d\u00e9veloppement ou production) dans le fichier de propri\u00e9t\u00e9s (.properties) suffit \u00e0 d\u00e9ployer l'application dans l'un ou l'autre environnement. Ceci est rendu possible gr\u00e2ce \u00e0 la notion de profil \u00e0 d\u00e9clarer toujours dans le fichier de propri\u00e9t\u00e9s. Spring Boot poss\u00e8de un serveur d'application Tomcat embarqu\u00e9 afin de faciliter le d\u00e9ploiement d'une application web. Il est possible d'utiliser un serveur autre ou externe, gr\u00e2ce \u00e0 une simple d\u00e9claration dans le fichier pom.xml. Spring Boot permet de mettre en place un suivi m\u00e9trique de l'application une fois d\u00e9ploy\u00e9e sur le serveur afin de suivre en temps r\u00e9el l'activit\u00e9 du serveur, ceci gr\u00e2ce \u00e0 spring-boot-starter-actuator. Outil configuration spring boot Le site start.spring.io permet de g\u00e9n\u00e9rer l'ensemble des d\u00e9pendances du projet et cr\u00e9\u00e9 le squelette de l'application. Hello REST World Pr\u00e9requis Java 1.8 Maven Spring Tool Suite Git Linux? Fichier de build <?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.3.3.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>demo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>demo</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> Classe de lancement: com.example.demo.DemoApplication package com.example.demo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } // Bean permettant de lister la liste des bens Spring instanci\u00e9s @Bean public CommandLineRunner commandLineRunner(ApplicationContext ctx) { return args -> { System.out.println(\"Let's inspect the beans provided by Spring Boot:\"); String[] beanNames = ctx.getBeanDefinitionNames(); Arrays.sort(beanNames); for (String beanName : beanNames) { System.out.println(beanName); } }; } } La classe DemoApplication contient la m\u00e9thode void main(String[] args) n\u00e9cessaire dans une application Spring Boot, et permet l'ex\u00e9cution de celle-ci : c'est le point d'entr\u00e9e de l'application. La classe de d\u00e9marrage de l'application DemoApplication doit \u00eatre \u00e0 la racine du package principal si on veut permettre \u00e0 Spring de scanner les sous-packages en utilisant l'annotation @SpringBootApplication . L'annotation @SpringBootApplication est centrale dans une application Spring Boot et permet de scanner le package courant et ses sous-packages . Elle est \u00e9quivalente \u00e0 l'ensemble des annotations @Configuration @EnableAutoConfiguration @ComponentScan @Configuration permet de configurer une classe comme une source de d\u00e9finition des beans Spring. @EnableAutoConfiguration ajoute l'ensemble des beans du classpath. @ComponentScan autorise Spring \u00e0 rechercher tous les composants, les configurations et autres services de l'application et \u00e0 initialiser tous les contr\u00f4leurs. Le contr\u00f4leur com.example.springboot.HelloController package com.example.springboot; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.RequestMapping; @RestController public class HelloController { @RequestMapping(\"/\") public String index() { return \"Greetings from Spring Boot!\"; } } Cette classe est annot\u00e9e @RestController, ce qui veut dire qu'elle est pr\u00eate \u00e0 \u00eatre utilis\u00e9e par Spring MVC pour g\u00e9rer des requ\u00eates web. @RequestMapping associe / \u00e0 la m\u00e9thode index().Quand la m\u00e9thode est invoqu\u00e9e depuis un navigateur web ou la commande curl elle retourne le texte du return. L'annotation @RestController, est une combinaison des annotations @Controller et @ResponseBody, cr\u00e9\u00e9e une r\u00e9ponse web retournant de la data plut\u00f4t qu'une vue. Lancement Plusieurs possibilit\u00e9s: Avec Eclipse Run as Spring boot Application Avec maven mvn spring-boot:run En lan\u00e7ant le main du jar g\u00e9n\u00e9r\u00e9 Tests manuels Il suffit de faire une requ\u00eate http vers localhost:8080 curl localhost:8080 ou avec le navigateur: firefox http://localhost:8080 8080 est le port par d\u00e9faut du serveur web embarqu\u00e9 par spring boot. Tests unitaires Junit package com.example.springboot; import static org.hamcrest.Matchers.equalTo; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.http.MediaType; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; @SpringBootTest @AutoConfigureMockMvc public class HelloControllerTest { @Autowired private MockMvc mvc; @Test public void getHello() throws Exception { mvc.perform(MockMvcRequestBuilders.get(\"/\").accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().string(equalTo(\"Greetings from Spring Boot!\"))); } } Exo thymeleaf Thymeleaf est un Java HTML5 Template Engine qui peut travailler \u00e0 la fois dans des environnements Web (Servlet) et celui de non Web. Il est mieux adapt\u00e9 pour diffuser XHTML/HTML5 sur View (View Layer) des applications Web bas\u00e9es sur MVC. Mais il peut traiter n'importe quel fichier XML m\u00eame dans des environnements hors ligne (offline). Il fournit une int\u00e9gration compl\u00e8te de Spring Framework\u200b\u200b\u200b\u200b\u200b\u200b\u200b. Le fichier mod\u00e8le (Template file) de Thymeleaf est en substance un fichier de document ordinaire au format HTML5. Thymeleaf Engine (le moteur Thymeleaf) va lire un fichier mod\u00e8le et le combiner avec des objets Java pour g\u00e9n\u00e9rer (generate) un autre document. Voici ce que nous allons r\u00e9aliser: Exo thymeleaf Security Tuto D\u00e9pendances start.spring.io devtools web thymeleaf Security Ajouter dans le pom g\u00e9n\u00e9r\u00e9: dependency> <groupId>org.thymeleaf.extras</groupId> <artifactId>thymeleaf-extras-springsecurity5</artifactId> </dependency> Un petit conseil: il vaut mieux supprimer tous les .html non n\u00e9cessaire. Classe de configuration de la s\u00e9curit\u00e9: @Configuration public class SecurityConfiguration extends WebSecurityConfigurerAdapter { protected void configure(final HttpSecurity http) throws Exception { http .formLogin() .loginPage(\"/login\") .failureUrl(\"/login-error\") .and() .logout() .logoutSuccessUrl(\"/index\"); } @Bean @Override public UserDetailsService userDetailsService() { UserDetails user = User.withDefaultPasswordEncoder() .username(\"user\") .password(\"user\") .roles(\"USER\") .build(); UserDetails admin = User.withDefaultPasswordEncoder() .username(\"admin\") .password(\"admin\") .roles(\"ADMIN\") .build(); return new InMemoryUserDetailsManager(user,admin); } }","title":"Home"},{"location":"#spring-boot","text":"","title":"Spring Boot"},{"location":"#objectifs-du-cours","text":"D\u00e9couverte et utilisation de microservices Utiliser JPA pour communiquer avec des bases de donn\u00e9es Valider et s\u00e9curiser les donn\u00e9es Gestion d'erreurs","title":"Objectifs du cours"},{"location":"#notions-et-definitions","text":"","title":"Notions et d\u00e9finitions"},{"location":"#microservice","text":"Les microservices sont une technique de d\u00e9veloppement logiciel \u2014 une variante de l'architecture orient\u00e9e services (SOA) \u2014 qui structure une application comme un ensemble de services faiblement coupl\u00e9s. Les microservices ind\u00e9pendants communiquent les uns avec les autres en utilisant des API ind\u00e9pendantes du langage de programmation. Des API REST sont souvent employ\u00e9es pour relier chaque microservice aux autres. Un avantage avanc\u00e9 est que lors d'un besoin critique de mise \u00e0 jour d'une ressource, seul le microservice contenant cette ressource sera mis \u00e0 jour, l'ensemble de l'application restant compatible avec la modification, contrairement \u00e0 la totalit\u00e9 de l'application dans une architecture classique.","title":"Microservice"},{"location":"#rest","text":"Rappels rapide REST: REST (pour REpresentational State Transfer) ne d\u00e9crit pas une impl\u00e9mentation mais un style d\u2019architecture qui suit diff\u00e9rents principes : client-serveur : les responsabilit\u00e9s sont s\u00e9par\u00e9es entre le client et le serveur. L\u2019interface utilisateur est s\u00e9par\u00e9e de celle du stockage des donn\u00e9es. Cela permet aux deux d\u2019\u00e9voluer ind\u00e9pendamment (contrairement \u00e0 des applications qui r\u00e9alisent des requ\u00eates directement en base de donn\u00e9es par exemple\u2026). sans \u00e9tat : la requ\u00eate envoy\u00e9e par le client doit \u00eatre auto-suffisante : ne pas n\u00e9cessiter de sauvegarder un \u00e9tat sur le serveur mise en cache : la possibilit\u00e9 pour le serveur de sp\u00e9cifier les r\u00e9ponses pouvant \u00eatre mises en cache une interface uniforme : chaque ressource est identifi\u00e9e unitairement, les ressources ont des repr\u00e9sentations d\u00e9finies un syst\u00e8me hi\u00e9rarchis\u00e9 par couche : les \u00e9tats de l\u2019application sont repr\u00e9sent\u00e9s par des ressources individuelles. L\u2019ensemble de l\u2019information n\u2019est pas envoy\u00e9e dans une ressource unique. \u00c0 noter qu\u2019on assimile \u00ab API REST \u00bb avec l\u2019application de ce style d\u2019architecture sur le protocole HTTP et en utilisant le format d\u2019\u00e9change de donn\u00e9es JSON. Avec le protocole HTTP d\u00e9finit les m\u00e9thodes suivantes: GET , POST , PUT , PATCH et DELETE . Exemple: Ressource collection, telle que http://api.exemple.com/collection/ GET : R\u00e9cup\u00e8re les URI des ressources membres de la ressource collection dans le corps de la r\u00e9ponse. POST : Cr\u00e9e une ressource membre dans la ressource collection en utilisant les instructions du corps de la requ\u00eate. L'URI de la ressource membre cr\u00e9\u00e9e est attribu\u00e9 automatiquement et retourn\u00e9 dans le champ d'en-t\u00eate Location de la r\u00e9ponse. PUT : Remplace toutes les repr\u00e9sentations des ressources membres de la ressource collection par la repr\u00e9sentation dans le corps de la requ\u00eate, ou cr\u00e9e la ressource collection si elle n'existe pas. PATCH :Met \u00e0 jour toutes les repr\u00e9sentations des ressources membres de la ressource collection en utilisant les instructions du corps de la requ\u00eate, ou cr\u00e9e \u00e9ventuellement la ressource collection si elle n'existe pas. DETELE : Supprime toutes les repr\u00e9sentations des ressources membres de la ressource collection. Plus d'infos: HTTP , REST","title":"REST"},{"location":"#mvc","text":"","title":"MVC"},{"location":"#pourquoi-spring-boot","text":"D\u00e9finition : Spring est un Framework de d\u00e9veloppement d'applications Java, qui apporte plusieurs fonctionnalit\u00e9s comme Spring Security, SpringMVC, Spring Batch, Spring Data, etc. Ces Frameworks ont pour objectif de faciliter la t\u00e2che aux d\u00e9veloppeurs. Malheureusement, leurs mises en \u0153uvre deviennent tr\u00e8s complexes \u00e0 travers les fichiers de configuration XML qui ne cessent de grossir, et une gestion des d\u00e9pendances fastidieuse. C'est pour r\u00e9pondre \u00e0 cette inqui\u00e9tude que le projet Spring Boot a vu le jour. D\u00e9finition : Spring Boot est un sous projet de Spring qui vise \u00e0 rendre Spring plus facile d'utilisation en \u00e9limant plusieurs \u00e9tapes de configuration. L'objectif de Spring Boot est de permettre aux d\u00e9veloppeurs de se concentrer sur des t\u00e2ches techniques et non des t\u00e2ches de configurations, de d\u00e9ploiements, etc. Ce qui a pour cons\u00e9quences un gain de temps et de productivit\u00e9. Spring Boot apporte \u00e0 Spring une tr\u00e8s grande simplicit\u00e9 d'utilisation : Il facilite notamment la cr\u00e9ation, la configuration et le d\u00e9ploiement d'une application compl\u00e8te. On n'a plus besoin des fichiers XML \u00e0 configurer (pas besoin du fichier du descripteur de d\u00e9ploiement web.xml dans le cas d'une application web). Spring Boot permet de d\u00e9ployer tr\u00e8s facilement une application dans plusieurs environnements sans avoir \u00e0 \u00e9crire des scripts. Pour ce faire, une simple indication de l'environnement (d\u00e9veloppement ou production) dans le fichier de propri\u00e9t\u00e9s (.properties) suffit \u00e0 d\u00e9ployer l'application dans l'un ou l'autre environnement. Ceci est rendu possible gr\u00e2ce \u00e0 la notion de profil \u00e0 d\u00e9clarer toujours dans le fichier de propri\u00e9t\u00e9s. Spring Boot poss\u00e8de un serveur d'application Tomcat embarqu\u00e9 afin de faciliter le d\u00e9ploiement d'une application web. Il est possible d'utiliser un serveur autre ou externe, gr\u00e2ce \u00e0 une simple d\u00e9claration dans le fichier pom.xml. Spring Boot permet de mettre en place un suivi m\u00e9trique de l'application une fois d\u00e9ploy\u00e9e sur le serveur afin de suivre en temps r\u00e9el l'activit\u00e9 du serveur, ceci gr\u00e2ce \u00e0 spring-boot-starter-actuator.","title":"Pourquoi Spring Boot?"},{"location":"#outil-configuration-spring-boot","text":"Le site start.spring.io permet de g\u00e9n\u00e9rer l'ensemble des d\u00e9pendances du projet et cr\u00e9\u00e9 le squelette de l'application.","title":"Outil configuration spring boot"},{"location":"#hello-rest-world","text":"","title":"Hello REST World"},{"location":"#prerequis","text":"Java 1.8 Maven Spring Tool Suite Git Linux?","title":"Pr\u00e9requis"},{"location":"#fichier-de-build","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <version>2.3.3.RELEASE</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>demo</artifactId> <version>0.0.1-SNAPSHOT</version> <name>demo</name> <description>Demo project for Spring Boot</description> <properties> <java.version>1.8</java.version> </properties> <dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> <optional>true</optional> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> <exclusions> <exclusion> <groupId>org.junit.vintage</groupId> <artifactId>junit-vintage-engine</artifactId> </exclusion> </exclusions> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project>","title":"Fichier de build"},{"location":"#classe-de-lancement-comexampledemodemoapplication","text":"package com.example.demo; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } // Bean permettant de lister la liste des bens Spring instanci\u00e9s @Bean public CommandLineRunner commandLineRunner(ApplicationContext ctx) { return args -> { System.out.println(\"Let's inspect the beans provided by Spring Boot:\"); String[] beanNames = ctx.getBeanDefinitionNames(); Arrays.sort(beanNames); for (String beanName : beanNames) { System.out.println(beanName); } }; } } La classe DemoApplication contient la m\u00e9thode void main(String[] args) n\u00e9cessaire dans une application Spring Boot, et permet l'ex\u00e9cution de celle-ci : c'est le point d'entr\u00e9e de l'application. La classe de d\u00e9marrage de l'application DemoApplication doit \u00eatre \u00e0 la racine du package principal si on veut permettre \u00e0 Spring de scanner les sous-packages en utilisant l'annotation @SpringBootApplication . L'annotation @SpringBootApplication est centrale dans une application Spring Boot et permet de scanner le package courant et ses sous-packages . Elle est \u00e9quivalente \u00e0 l'ensemble des annotations @Configuration @EnableAutoConfiguration @ComponentScan @Configuration permet de configurer une classe comme une source de d\u00e9finition des beans Spring. @EnableAutoConfiguration ajoute l'ensemble des beans du classpath. @ComponentScan autorise Spring \u00e0 rechercher tous les composants, les configurations et autres services de l'application et \u00e0 initialiser tous les contr\u00f4leurs.","title":"Classe de lancement: com.example.demo.DemoApplication"},{"location":"#le-controleur-comexamplespringboothellocontroller","text":"package com.example.springboot; import org.springframework.web.bind.annotation.RestController; import org.springframework.web.bind.annotation.RequestMapping; @RestController public class HelloController { @RequestMapping(\"/\") public String index() { return \"Greetings from Spring Boot!\"; } } Cette classe est annot\u00e9e @RestController, ce qui veut dire qu'elle est pr\u00eate \u00e0 \u00eatre utilis\u00e9e par Spring MVC pour g\u00e9rer des requ\u00eates web. @RequestMapping associe / \u00e0 la m\u00e9thode index().Quand la m\u00e9thode est invoqu\u00e9e depuis un navigateur web ou la commande curl elle retourne le texte du return. L'annotation @RestController, est une combinaison des annotations @Controller et @ResponseBody, cr\u00e9\u00e9e une r\u00e9ponse web retournant de la data plut\u00f4t qu'une vue.","title":"Le contr\u00f4leur com.example.springboot.HelloController"},{"location":"#lancement","text":"Plusieurs possibilit\u00e9s: Avec Eclipse Run as Spring boot Application Avec maven mvn spring-boot:run En lan\u00e7ant le main du jar g\u00e9n\u00e9r\u00e9","title":"Lancement"},{"location":"#tests-manuels","text":"Il suffit de faire une requ\u00eate http vers localhost:8080 curl localhost:8080 ou avec le navigateur: firefox http://localhost:8080 8080 est le port par d\u00e9faut du serveur web embarqu\u00e9 par spring boot.","title":"Tests manuels"},{"location":"#tests-unitaires-junit","text":"package com.example.springboot; import static org.hamcrest.Matchers.equalTo; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.http.MediaType; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; @SpringBootTest @AutoConfigureMockMvc public class HelloControllerTest { @Autowired private MockMvc mvc; @Test public void getHello() throws Exception { mvc.perform(MockMvcRequestBuilders.get(\"/\").accept(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().string(equalTo(\"Greetings from Spring Boot!\"))); } }","title":"Tests unitaires Junit"},{"location":"#exo-thymeleaf","text":"Thymeleaf est un Java HTML5 Template Engine qui peut travailler \u00e0 la fois dans des environnements Web (Servlet) et celui de non Web. Il est mieux adapt\u00e9 pour diffuser XHTML/HTML5 sur View (View Layer) des applications Web bas\u00e9es sur MVC. Mais il peut traiter n'importe quel fichier XML m\u00eame dans des environnements hors ligne (offline). Il fournit une int\u00e9gration compl\u00e8te de Spring Framework\u200b\u200b\u200b\u200b\u200b\u200b\u200b. Le fichier mod\u00e8le (Template file) de Thymeleaf est en substance un fichier de document ordinaire au format HTML5. Thymeleaf Engine (le moteur Thymeleaf) va lire un fichier mod\u00e8le et le combiner avec des objets Java pour g\u00e9n\u00e9rer (generate) un autre document. Voici ce que nous allons r\u00e9aliser:","title":"Exo thymeleaf"},{"location":"#exo-thymeleaf-security","text":"Tuto D\u00e9pendances start.spring.io devtools web thymeleaf Security Ajouter dans le pom g\u00e9n\u00e9r\u00e9: dependency> <groupId>org.thymeleaf.extras</groupId> <artifactId>thymeleaf-extras-springsecurity5</artifactId> </dependency> Un petit conseil: il vaut mieux supprimer tous les .html non n\u00e9cessaire. Classe de configuration de la s\u00e9curit\u00e9: @Configuration public class SecurityConfiguration extends WebSecurityConfigurerAdapter { protected void configure(final HttpSecurity http) throws Exception { http .formLogin() .loginPage(\"/login\") .failureUrl(\"/login-error\") .and() .logout() .logoutSuccessUrl(\"/index\"); } @Bean @Override public UserDetailsService userDetailsService() { UserDetails user = User.withDefaultPasswordEncoder() .username(\"user\") .password(\"user\") .roles(\"USER\") .build(); UserDetails admin = User.withDefaultPasswordEncoder() .username(\"admin\") .password(\"admin\") .roles(\"ADMIN\") .build(); return new InMemoryUserDetailsManager(user,admin); } }","title":"Exo thymeleaf Security"},{"location":"TP1/","text":"TP1 url: https://start.spring.io/starter.zip?name=webapp&groupId=com.boot&artifactId=webapp&version=0.0.1-SNAPSHOT&description=Demo+project+for+Spring+Boot&packageName=com.example.demo&type=maven-project&packaging=jar&javaVersion=1.8&language=java&bootVersion=2.3.3.RELEASE&dependencies=devtools&dependencies=h2&dependencies=data-jpa&dependencies=security&dependencies=thymeleaf&dependencies=web Partie 1 BDD L'utilisation de JPA (Java Persistence API) permet de s'abstraire du langage de requ\u00eate de la base de donn\u00e9es. H2 est une base de donn\u00e9es embarqu\u00e9e, en m\u00e9moire, \u00e9crite en Java qui permet de garder le build portable. La configuration de H2 est tr\u00e8s simple. Il suffit de l'ajouter dans le POM pour que Spring Boot cr\u00e9er automatiquement la database, cr\u00e9er les objets JDBC et configure Hibernate. Hibernate va \u00e0 son tour scanner toutes les annotations JPA et va cr\u00e9er automatiquement les tables dans la BDD. Connexion console : JDBC URL=url=jdbc:h2:mem:testdb Partie 2 MVC CRUD L'acronyme CRUD (pour create, read, update, delete) d\u00e9signe les quatre op\u00e9rations de base pour la persistance des donn\u00e9es, en particulier le stockage d'informations en base de donn\u00e9es. Operation SQL HTTP Create INSERT POST Read SELECT GET Update UPDATE PUT Delete DELETE DELETE Cr\u00e9ation / mise \u00e0 jour d'un product La m\u00eame page HTML peut \u00eatre utilis\u00e9e pour cr\u00e9er et mettre \u00e0 jour les produits. L'astuce consiste \u00e0 faire en sorte que le controller retourne un objet vide pour une cr\u00e9ation et l'objet existant pour une mise \u00e0 jour. De cette fa\u00e7on il n'y aura pas de probl\u00e8mes d'objets null. Et toutes les propri\u00e9t\u00e9s non nulle peuvent se transformer en formulaire. La ligne suivante cr\u00e9e le formulaire dans Thymeleaf. <form class=\"form-horizontal\" th:object=\"${product}\" th:action=\"@{/product}\" method=\"post\"> Le tag th:object relie l'objet product au formulaire. Le tag th:action d\u00e9finit quelle url doit \u00eatre appel\u00e9e lors de la soumission du formulaire (/product) url. La m\u00e9thode post est aussi renseign\u00e9e. C'est donc le controller suivant qui va \u00eatre appel\u00e9: @RequestMapping(value = \"product\", method = RequestMethod.POST) public String saveProduct(Product product){ productService.saveProduct(product); return \"redirect:/product/\" + product.getId(); } Il retourne vers l'objet modifi\u00e9. L'\u00e9tape suivante est cruciale pour que les mise \u00e0 jour fonctionnent. Toutes les entit\u00e9s pr\u00e9sentes en BDD ont un ID. L'utilisateur ne peut pas l'\u00e9diter mais il doit \u00eatre pr\u00e9sent dans la requ\u00eate de retour vers le serveur. Si l'ID est manquant, le syst\u00e8me ne peut pas savoir si c'est une M\u00e0J ou une cr\u00e9ation. En cas d'oubli de l'ID une nouvelle entit\u00e9 sera cr\u00e9e en BDD. La mani\u00e8re de g\u00e9rer ce probl\u00e8me est d'inclure des champs cach\u00e9s. (Pour hibernate le champ version permet d'\u00e9viter les conflits de mise \u00e0 jour) <input type=\"hidden\" th:field=\"*{id}\"/> <input type=\"hidden\" th:field=\"*{version}\"/> Partie 3 S\u00e9curit\u00e9 / R\u00f4les et permissions Ce que nous voulons r\u00e9aliser: Pour un utilisateur pas authentifi\u00e9: Vue page d'accueil et liste de produits. Pour un utilisateur authentifi\u00e9 (R\u00f4le USER) vue en plus des d\u00e9tails du produit. Pour un utilisateur authentifi\u00e9 (R\u00f4le ADMIN) CRUD sur les produits. A faire: Modification du controller de s\u00e9curit\u00e9: Sp\u00e9cifier les url n\u00e9cessitant de s\u00e9curit\u00e9. Pour toutes les autres rajouter le code suivant: java .anyRequest().permitAll() .and().formLogin().loginPage(\"/login\").permitAll() .and().logout().permitAll(); Ajout dans le menu d'une condition de cr\u00e9ation de product: sec:authorize=\"hasRole('ROLE_ADMIN')\" Ajout de la page login.","title":"TP1"},{"location":"TP1/#tp1","text":"url: https://start.spring.io/starter.zip?name=webapp&groupId=com.boot&artifactId=webapp&version=0.0.1-SNAPSHOT&description=Demo+project+for+Spring+Boot&packageName=com.example.demo&type=maven-project&packaging=jar&javaVersion=1.8&language=java&bootVersion=2.3.3.RELEASE&dependencies=devtools&dependencies=h2&dependencies=data-jpa&dependencies=security&dependencies=thymeleaf&dependencies=web","title":"TP1"},{"location":"TP1/#partie-1-bdd","text":"L'utilisation de JPA (Java Persistence API) permet de s'abstraire du langage de requ\u00eate de la base de donn\u00e9es. H2 est une base de donn\u00e9es embarqu\u00e9e, en m\u00e9moire, \u00e9crite en Java qui permet de garder le build portable. La configuration de H2 est tr\u00e8s simple. Il suffit de l'ajouter dans le POM pour que Spring Boot cr\u00e9er automatiquement la database, cr\u00e9er les objets JDBC et configure Hibernate. Hibernate va \u00e0 son tour scanner toutes les annotations JPA et va cr\u00e9er automatiquement les tables dans la BDD. Connexion console : JDBC URL=url=jdbc:h2:mem:testdb","title":"Partie 1 BDD"},{"location":"TP1/#partie-2-mvc","text":"","title":"Partie 2 MVC"},{"location":"TP1/#crud","text":"L'acronyme CRUD (pour create, read, update, delete) d\u00e9signe les quatre op\u00e9rations de base pour la persistance des donn\u00e9es, en particulier le stockage d'informations en base de donn\u00e9es. Operation SQL HTTP Create INSERT POST Read SELECT GET Update UPDATE PUT Delete DELETE DELETE","title":"CRUD"},{"location":"TP1/#creation-mise-a-jour-dun-product","text":"La m\u00eame page HTML peut \u00eatre utilis\u00e9e pour cr\u00e9er et mettre \u00e0 jour les produits. L'astuce consiste \u00e0 faire en sorte que le controller retourne un objet vide pour une cr\u00e9ation et l'objet existant pour une mise \u00e0 jour. De cette fa\u00e7on il n'y aura pas de probl\u00e8mes d'objets null. Et toutes les propri\u00e9t\u00e9s non nulle peuvent se transformer en formulaire. La ligne suivante cr\u00e9e le formulaire dans Thymeleaf. <form class=\"form-horizontal\" th:object=\"${product}\" th:action=\"@{/product}\" method=\"post\"> Le tag th:object relie l'objet product au formulaire. Le tag th:action d\u00e9finit quelle url doit \u00eatre appel\u00e9e lors de la soumission du formulaire (/product) url. La m\u00e9thode post est aussi renseign\u00e9e. C'est donc le controller suivant qui va \u00eatre appel\u00e9: @RequestMapping(value = \"product\", method = RequestMethod.POST) public String saveProduct(Product product){ productService.saveProduct(product); return \"redirect:/product/\" + product.getId(); } Il retourne vers l'objet modifi\u00e9. L'\u00e9tape suivante est cruciale pour que les mise \u00e0 jour fonctionnent. Toutes les entit\u00e9s pr\u00e9sentes en BDD ont un ID. L'utilisateur ne peut pas l'\u00e9diter mais il doit \u00eatre pr\u00e9sent dans la requ\u00eate de retour vers le serveur. Si l'ID est manquant, le syst\u00e8me ne peut pas savoir si c'est une M\u00e0J ou une cr\u00e9ation. En cas d'oubli de l'ID une nouvelle entit\u00e9 sera cr\u00e9e en BDD. La mani\u00e8re de g\u00e9rer ce probl\u00e8me est d'inclure des champs cach\u00e9s. (Pour hibernate le champ version permet d'\u00e9viter les conflits de mise \u00e0 jour) <input type=\"hidden\" th:field=\"*{id}\"/> <input type=\"hidden\" th:field=\"*{version}\"/>","title":"Cr\u00e9ation / mise \u00e0 jour d'un product"},{"location":"TP1/#partie-3-securite-roles-et-permissions","text":"Ce que nous voulons r\u00e9aliser: Pour un utilisateur pas authentifi\u00e9: Vue page d'accueil et liste de produits. Pour un utilisateur authentifi\u00e9 (R\u00f4le USER) vue en plus des d\u00e9tails du produit. Pour un utilisateur authentifi\u00e9 (R\u00f4le ADMIN) CRUD sur les produits. A faire: Modification du controller de s\u00e9curit\u00e9: Sp\u00e9cifier les url n\u00e9cessitant de s\u00e9curit\u00e9. Pour toutes les autres rajouter le code suivant: java .anyRequest().permitAll() .and().formLogin().loginPage(\"/login\").permitAll() .and().logout().permitAll(); Ajout dans le menu d'une condition de cr\u00e9ation de product: sec:authorize=\"hasRole('ROLE_ADMIN')\" Ajout de la page login.","title":"Partie 3 S\u00e9curit\u00e9 / R\u00f4les et permissions"},{"location":"about/","text":"Que exaudi Tibi quem patrique Lorem markdownum: statione Pallade lyncas. Caelumque reliquit suis. Vulnere materque crabronis heu et in fieri, aderit corpore et Ennomon perimunt medius gramina adrides intravit tantos demittere placeat. Primordia pudori. Precatus quodam. Iovis Orchomenon vulnera domus , et mittor posse bracchia : memorabile locuta cum, vino vultu voce imperat es . Non tuam. Haud una solacia vidi sororem, Oceanum illam, vetitum caligine, habebat, simul aure precantem, diligit. Umbra Iuppiter Nil eripui saxi domos iniectam susurro; Aeneaden et fores ad candida metum. Sit humanas resque. Lacertos iussum alis incipit, et pollice, in fontis tamen. Ait debita bis quod adicis erat mento vero mora sed, te, malo. Erat pariterque et munera at verba horriferamque plura Plurima commissas. if (sql + -2) { systemGigabyteQueue(mms + 4); textUrl = font; } adf_bios = file.sramExpressCore.metadataDonationwareCarrier( standaloneCharacterZip); dimm(iscsi_burn_sidebar(reciprocalPodcast + streamingExabytePad, google), 3, switch); var port_user = remote_point_guid - adc; printerTweenFsb.readSoft += masterStandaloneCloud(keyFaqIsa + skyscraperRubyWorm + twitter / dvd_protocol_cc, cloud.play( solid_property, lanFrameAnd), tweet_click.num_raw(1, cutUtf.client( website, add, 4))); Ve bis virgae ibi sum animam lacus In ait? Illi mox quem et ferox Taenarius tibi spolioque tamen. Exerceor libido loquor Picus velocius unda: vivere pro renovata petit. Gaudia fuit texit silva thalamos Troiana, ego, heu haec, loquenti domi. Transitus nostro. cybercrime -= pretestBitmap / troubleshooting_sram; cronExtranet = matrixDdr(hardware, computer) + vga / storage; web.key_ics_wizard = cursor(dawE) - symbolic; Qui vel committitur, quam que dederis caerulus molle. Data tergo loquiturque et medere genetrix speque commisisse hamatisque quis verbaque.","title":"Que exaudi"},{"location":"about/#que-exaudi","text":"","title":"Que exaudi"},{"location":"about/#tibi-quem-patrique","text":"Lorem markdownum: statione Pallade lyncas. Caelumque reliquit suis. Vulnere materque crabronis heu et in fieri, aderit corpore et Ennomon perimunt medius gramina adrides intravit tantos demittere placeat. Primordia pudori. Precatus quodam. Iovis Orchomenon vulnera domus , et mittor posse bracchia : memorabile locuta cum, vino vultu voce imperat es . Non tuam. Haud una solacia vidi sororem, Oceanum illam, vetitum caligine, habebat, simul aure precantem, diligit.","title":"Tibi quem patrique"},{"location":"about/#umbra-iuppiter","text":"Nil eripui saxi domos iniectam susurro; Aeneaden et fores ad candida metum. Sit humanas resque. Lacertos iussum alis incipit, et pollice, in fontis tamen. Ait debita bis quod adicis erat mento vero mora sed, te, malo. Erat pariterque et munera at verba horriferamque plura Plurima commissas. if (sql + -2) { systemGigabyteQueue(mms + 4); textUrl = font; } adf_bios = file.sramExpressCore.metadataDonationwareCarrier( standaloneCharacterZip); dimm(iscsi_burn_sidebar(reciprocalPodcast + streamingExabytePad, google), 3, switch); var port_user = remote_point_guid - adc; printerTweenFsb.readSoft += masterStandaloneCloud(keyFaqIsa + skyscraperRubyWorm + twitter / dvd_protocol_cc, cloud.play( solid_property, lanFrameAnd), tweet_click.num_raw(1, cutUtf.client( website, add, 4)));","title":"Umbra Iuppiter"},{"location":"about/#ve-bis-virgae-ibi-sum-animam-lacus","text":"In ait? Illi mox quem et ferox Taenarius tibi spolioque tamen. Exerceor libido loquor Picus velocius unda: vivere pro renovata petit. Gaudia fuit texit silva thalamos Troiana, ego, heu haec, loquenti domi. Transitus nostro. cybercrime -= pretestBitmap / troubleshooting_sram; cronExtranet = matrixDdr(hardware, computer) + vga / storage; web.key_ics_wizard = cursor(dawE) - symbolic; Qui vel committitur, quam que dederis caerulus molle. Data tergo loquiturque et medere genetrix speque commisisse hamatisque quis verbaque.","title":"Ve bis virgae ibi sum animam lacus"}]}